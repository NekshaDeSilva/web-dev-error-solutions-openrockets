
This document details how to create a circular progress bar using only CSS.  No JavaScript is required! This utilizes CSS3 properties for advanced styling and animation.

## Description of the Styling

This technique leverages the `clip-path` property to create a circular mask that reveals a portion of a full circle.  By animating the `clip-path` property, we simulate the progress bar filling up. We use a background color for the track and a different color for the progress fill.  The percentage of progress is controlled by a custom property (`--progress`).

## Full Code

```html
<!DOCTYPE html>
<html>
<head>
<title>CSS Circular Progress Bar</title>
<style>
.circular-progress {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  background-color: #f0f0f0; /* Track color */
  position: relative;
}

.circular-progress::before {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  background-color: #4CAF50; /* Progress color */
  border-radius: 50%;
  clip-path: circle(50% at 50% 50%); /* Initial clip path */
  animation: progress 2s linear forwards; /* Animation */
  --progress: 75; /* Adjust this value (0-100) to change progress */
}

@keyframes progress {
  to {
    clip-path: circle(50% at 50% calc(90deg + (var(--progress) * 3.6deg)));
  }
}
</style>
</head>
<body>

<h1>CSS Circular Progress Bar</h1>

<div class="circular-progress"></div>

</body>
</html>
```

## Explanation

* **`.circular-progress`**: This class sets up the base circle with a background color (the track).
* **`.circular-progress::before`**: This pseudo-element creates the progress fill.  `translate(-50%, -50%)` centers it within the parent.
* **`clip-path: circle(50% at 50% 50%);`**: This initially creates a full circle.  The animation changes the `50%` part.
* **`animation: progress 2s linear forwards;`**: This applies the `progress` animation, which takes 2 seconds, is linear, and runs forwards (doesn't reverse).
* **`@keyframes progress`**:  This defines the animation. The `clip-path` is dynamically calculated based on `var(--progress)`.  The formula `calc(90deg + (var(--progress) * 3.6deg))` ensures the progress starts from the top and moves clockwise.  3.6deg is used because 360deg / 100 = 3.6deg (for 0-100% progress).  Adding 90deg offsets the starting point to the top.
* **`--progress`**: This custom property controls the percentage of progress.  Change its value to adjust the progress.

## Resources to Learn More

* **MDN Web Docs on `clip-path`:** [https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path](https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path)
* **MDN Web Docs on `@keyframes`:** [https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes)
* **CSS Tricks (search for "clip-path"):** [https://css-tricks.com/](https://css-tricks.com/) (Search for relevant articles on clip-path and animations)


Copyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.

