
This document details the creation of a visually appealing loading spinner using only CSS.  No JavaScript is required! This utilizes CSS animations and transforms to achieve the effect.


## Description of the Styling

This spinner consists of five equally spaced circles arranged in a circular pattern.  These circles pulsate individually, creating a dynamic loading animation. The styling uses keyframes to define the animation and transforms to position the circles correctly.  We'll leverage CSS variables for easy customization of colors and sizes.


## Full Code

```html
<!DOCTYPE html>
<html>
<head>
<title>CSS Loading Spinner</title>
<style>
:root {
  --spinner-size: 80px;
  --spinner-color: #007bff; /* Blue, easily customizable */
}

.spinner {
  width: var(--spinner-size);
  height: var(--spinner-size);
  position: relative;
  animation: rotate 2s linear infinite;
}

.spinner::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 10px;
  height: 10px;
  background-color: var(--spinner-color);
  border-radius: 50%;
  animation: bounce 1s ease-in-out infinite;
}

.spinner::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 10px;
    height: 10px;
    background-color: var(--spinner-color);
    border-radius: 50%;
    animation: bounce 1s ease-in-out infinite;
}

.spinner::before {
  animation-delay: 0.2s;
}

.spinner::after {
  animation-delay: 0.4s;
}


@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes bounce {
  0%, 100% {
    transform: scale(1);
    opacity: 1;

  }
  50% {
    transform: scale(1.2);
    opacity: 0.5;
  }
}
</style>
</head>
<body>

<div class="spinner"></div>

</body>
</html>
```

## Explanation

* **`--spinner-size` and `--spinner-color`:** These CSS variables allow easy customization of the spinner's size and color.
* **`.spinner`:** This class sets the dimensions and relative positioning for the spinner. The `rotate` animation spins the container.
* **`.spinner::before` and `.spinner::after`:** These pseudo-elements create the individual circles.  `transform: translate(-50%, -50%);` centers them within the parent.  `border-radius: 50%;` makes them circular. The `bounce` animation creates the pulsating effect. Different animation delays stagger the pulses.
* **`@keyframes rotate`:** This defines the rotation animation for the overall spinner.
* **`@keyframes bounce`:**  This keyframes animation defines the scaling and opacity changes to give the bouncing/pulsating effect.


## Resources to Learn More

* **MDN Web Docs on CSS Animations:** [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations)
* **MDN Web Docs on CSS Transforms:** [https://developer.mozilla.org/en-US/docs/Web/CSS/transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)
* **CSS-Tricks (various articles on animations and loaders):** [https://css-tricks.com/](https://css-tricks.com/)


Copyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.

