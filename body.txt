
This document details the creation of an expanding card using only CSS.  This effect is achieved through clever use of transitions and pseudo-elements, avoiding the need for JavaScript.  The design is simple and adaptable, making it a great example of clean and efficient CSS.  We'll use standard CSS3, no frameworks like Tailwind are needed.


**Description of the Styling:**

The card starts in a compact state. On hover, a pseudo-element (`::before`) expands outwards, creating the animation of expansion.  The main card content remains stationary, while the background color change is also controlled by the hover state. We'll use transitions for a smooth animation.  Opacity is also used to help with the visual effect of expansion.


**Full Code:**

```html
<!DOCTYPE html>
<html>
<head>
<title>Expanding Card</title>
<style>
.card {
  width: 200px;
  height: 150px;
  background-color: #f0f0f0;
  border-radius: 5px;
  overflow: hidden; /* Hide the expanding pseudo-element initially */
  position: relative; /* Needed for absolute positioning of pseudo-element */
  transition: background-color 0.3s ease; /* Smooth background transition */
}

.card::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 255, 0.3); /* Expanding element color */
  opacity: 0;
  transform: scale(0);
  transition: opacity 0.3s ease, transform 0.3s ease; /* Smooth expansion transition */
}

.card:hover {
  background-color: #ddd; /* Background color change on hover */
}

.card:hover::before {
  opacity: 1;
  transform: scale(1.2); /* Expand the pseudo-element */
}

.card-content {
  position: relative; /* Keep content on top */
  z-index: 1; /* Ensure content is above the expanding element */
  padding: 10px;
  text-align: center;
}
</style>
</head>
<body>

<div class="card">
  <div class="card-content">
    <h3>Expanding Card</h3>
    <p>Hover over me!</p>
  </div>
</div>

</body>
</html>
```


**Explanation:**

* **`.card`:**  Sets up the basic card styling, including dimensions, background, and rounded corners.  `overflow: hidden;` is crucial for initially hiding the expanding pseudo-element. `position: relative;` allows us to position the pseudo-element absolutely within the card.

* **`.card::before`:** This pseudo-element creates the expanding effect.  It's positioned absolutely, covering the entire card.  Initially, it's transparent (`opacity: 0`) and scaled down (`transform: scale(0)`). On hover, its opacity changes to 1 and it scales up (`transform: scale(1.2)`), creating the expansion.

* **`.card:hover` and `.card:hover::before`:**  These selectors control the styling changes on hover.  The background color of the card changes, and the pseudo-element's opacity and transform are adjusted.

* **`.card-content`:** This class is used to style the content inside the card, ensuring it remains visible above the expanding background.  `position: relative` and `z-index:1` are important here to keep the content on top of the pseudo-element.



**Links to Resources to Learn More:**

* **MDN Web Docs - CSS Transitions:** [https://developer.mozilla.org/en-US/docs/Web/CSS/transition](https://developer.mozilla.org/en-US/docs/Web/CSS/transition)
* **MDN Web Docs - CSS Pseudo-elements:** [https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)
* **CSS-Tricks (Various articles on CSS animations and effects):** [https://css-tricks.com/](https://css-tricks.com/)


Copyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.

