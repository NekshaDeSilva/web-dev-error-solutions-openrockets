
This document details the creation of a simple, yet visually appealing loading spinner using only CSS.  No JavaScript is required! This example uses CSS3 animations and transformations.

**Description of the Styling:**

This loading spinner consists of four circles arranged in a square.  Each circle rotates independently, creating a dynamic and visually engaging loading animation.  The styling utilizes CSS variables for easy customization of colors and sizes.  The animation is smooth and subtle, suitable for various contexts.


**Full Code:**

```html
<!DOCTYPE html>
<html>
<head>
<title>CSS Loading Spinner</title>
<style>
:root {
  --spinner-size: 50px;
  --spinner-color: #007bff; /* Blue */
}

.loader {
  display: inline-block;
  position: relative;
  width: var(--spinner-size);
  height: var(--spinner-size);
}

.loader div {
  position: absolute;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background-color: var(--spinner-color);
  opacity: 0.7;
  animation: rotate 1s linear infinite;
}

.loader div:nth-child(1) {
  animation-delay: 0s;
  transform: translateX(-100%) translateY(-100%);
}

.loader div:nth-child(2) {
  animation-delay: 0.2s;
  transform: translateX(100%) translateY(-100%);
}

.loader div:nth-child(3) {
  animation-delay: 0.4s;
  transform: translateX(100%) translateY(100%);
}

.loader div:nth-child(4) {
  animation-delay: 0.6s;
  transform: translateX(-100%) translateY(100%);
}

@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
</style>
</head>
<body>

<div class="loader">
  <div></div>
  <div></div>
  <div></div>
  <div></div>
</div>

</body>
</html>
```


**Explanation:**

* **`:root`**:  Defines CSS variables for easy customization of the spinner's size and color.
* **`.loader`**:  Sets up the container for the spinner, using `inline-block` for easy integration into text flow.
* **`.loader div`**: Styles each individual circle within the spinner.  `position: absolute` allows precise positioning.
* **`:nth-child()`**:  Applies different animation delays to each circle, creating the staggered rotation effect.
* **`@keyframes rotate`**: Defines the animation itself, rotating each circle 360 degrees continuously.


**Links to Resources to Learn More:**

* **MDN Web Docs on CSS Animations:** [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)
* **MDN Web Docs on CSS Transforms:** [https://developer.mozilla.org/en-US/docs/Web/CSS/transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)
* **CSS-Tricks (General CSS resource):** [https://css-tricks.com/](https://css-tricks.com/)


Copyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.

