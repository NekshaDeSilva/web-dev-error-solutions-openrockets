[{"body":"\nThis document addresses a common error encountered when using Next.js Middleware: `TypeError: next.redirect is not a function`. This error typically arises when attempting to use the `next.redirect()` function incorrectly within your middleware.  The `next.redirect()` function is only available *within the context of a middleware function's response*.  Incorrect placement or usage will trigger this error.\n\n**Description of the Error:**\n\nThe `TypeError: next.redirect is not a function` error indicates that you're trying to call the `next.redirect()` method in a place where it's not defined.  This often happens when:\n\n1. You're trying to use `next.redirect()` outside of a middleware function.\n2. You're calling it incorrectly within the middleware function (e.g., in an asynchronous function outside of the `response.end`).\n3. Your Middleware function's return statement is faulty.\n\n**Fixing the Error Step-by-Step:**\n\nLet's assume you have a middleware function intended to redirect users based on a condition (e.g., checking for authentication):\n\n\n**Incorrect Code (Produces the Error):**\n\n```javascript\n// middleware.js\nimport { NextResponse } from 'next/server'\n\nexport function middleware(req) {\n  const token = req.cookies.get('token');\n\n  if (!token) {\n    next.redirect('/login'); // Incorrect placement. next is not defined here.\n  }\n}\n```\n\n**Correct Code:**\n\n```javascript\n// middleware.js\nimport { NextResponse } from 'next/server'\n\nexport function middleware(req) {\n  const token = req.cookies.get('token');\n\n  if (!token) {\n    return NextResponse.redirect(new URL('/login', req.url));\n  }\n\n  return NextResponse.next(); // This is crucial to allow the request to continue if authenticated.\n}\n```\n\n**Explanation:**\n\n1. **Import `NextResponse`:** The corrected code correctly imports `NextResponse` from `next/server`.  This is essential for using functions like `redirect` within middleware.\n\n2. **Use `NextResponse.redirect()`:** The `next.redirect()` function is replaced with `NextResponse.redirect()`. This function takes a URL object as an argument which can be generated by `new URL('/login', req.url)` that will automatically prepend the request's origin to prevent issues with absolute URLs.\n\n\n3. **Handle the Non-Redirect Case (`NextResponse.next()`):**  Crucially, we add `return NextResponse.next();`. This is important because middleware must explicitly return a response. If the user is authenticated, `NextResponse.next()` lets the request continue to the original route.  Failure to return something will lead to a 500 error.\n\n**External References:**\n\n* **Next.js Middleware Documentation:** [https://nextjs.org/docs/app/building-your-application/routing/middleware](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n* **NextResponse API Reference:** [https://nextjs.org/docs/api-reference/next/server/next-response](https://nextjs.org/docs/api-reference/next/server/next-response)\n\n\n**Important Considerations:**\n\n* **Error Handling:** In a production environment, you should add robust error handling to catch unexpected situations and respond gracefully.\n* **Asynchronous Operations:** If your authentication check or other logic in the middleware involves asynchronous operations (e.g., database calls), make sure to use `async/await` correctly to handle promises.  Avoid using the direct `next.redirect` inside the `then` block and instead return the `NextResponse` once the promise resolves.\n\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":963,"title":"Handling \"TypeError: next.redirect is not a function\" in Next.js Middleware"}]
