[{"body":"\nThis document details how to create a circular progress bar using only CSS.  No JavaScript is required! This technique leverages the `clip-path` property and a pseudo-element to achieve a visually appealing and efficient progress indicator.\n\n**Description of the Styling:**\n\nThe circular progress bar is created using a single `div` element.  A pseudo-element (`::before`) is used to create the circular track.  The `clip-path` property is used to dynamically \"clip\" a portion of the circular track, representing the progress.  We'll use variables for easy customization of the progress bar's appearance (color, size, etc.).\n\n**Full Code:**\n\n```html\n<div class=\"progress-ring\" data-progress=\"75\">\n  <span class=\"progress-value\">75%</span>\n</div>\n```\n\n```css\n:root {\n  --progress-ring-size: 150px;\n  --progress-ring-color: #4CAF50;\n  --progress-ring-track-color: #e0e0e0;\n  --progress-ring-width: 10px;\n}\n\n.progress-ring {\n  width: var(--progress-ring-size);\n  height: var(--progress-ring-size);\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.progress-ring::before {\n  content: \"\";\n  position: absolute;\n  width: var(--progress-ring-size);\n  height: var(--progress-ring-size);\n  background-color: var(--progress-ring-track-color);\n  border-radius: 50%;\n}\n\n.progress-ring::after {\n  content: \"\";\n  position: absolute;\n  width: var(--progress-ring-size);\n  height: var(--progress-ring-size);\n  background-color: var(--progress-ring-color);\n  border-radius: 50%;\n  clip-path: polygon(50% 50%, 50% 0%, 100% 0%, 100% 50%); /* Initial clip path */\n  transform: rotate(-90deg); /* Start at top */\n  transition: transform 0.5s ease; /* Smooth transition */\n}\n\n.progress-ring[data-progress]::after {\n  --progress: calc(var(--progress) * 3.6deg); /* Convert percentage to degrees */\n  transform: rotate(calc(var(--progress, 0deg) - 90deg)); /* Rotate based on progress */\n}\n\n.progress-value {\n  position: absolute;\n  z-index: 1;\n  font-size: 1.2em;\n  font-weight: bold;\n  color: #333;\n}\n\n```\n\n**Explanation:**\n\n1. **Variables:**  The `:root` selector defines CSS custom properties (variables) for easy customization of the progress bar's size, colors, and width.\n\n2. **`::before` Pseudo-element:** Creates the background circle (track).\n\n3. **`::after` Pseudo-element:** Creates the filled portion of the progress bar.  The `clip-path` initially defines a triangle. The `transform: rotate()` rotates this triangle to create the circular fill effect.\n\n4. **`data-progress` Attribute:** The HTML `data-progress` attribute is used to dynamically set the progress percentage.\n\n5. **Calculation of Rotation:**  The CSS calculates the rotation angle based on the `data-progress` attribute. 360 degrees represent 100%, so we use `calc(var(--progress) * 3.6deg)` to convert the percentage to degrees.\n\n\n**Links to Resources to Learn More:**\n\n* **MDN Web Docs on `clip-path`:** [https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path](https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path)\n* **CSS Tricks on Pseudo-elements:** [https://css-tricks.com/pseudo-elements/](https://css-tricks.com/pseudo-elements/)\n* **Understanding CSS Variables (Custom Properties):** [https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":590,"title":"Creating a CSS-Only Circular Progress Bar"}]
