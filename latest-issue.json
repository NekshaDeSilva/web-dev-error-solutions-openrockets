[{"body":"\nThis document addresses a common issue encountered when using Next.js Middleware: the inability to import modules from `next/server` within regular page components.  Attempting to do so results in runtime errors because Middleware runs on the server, while page components run on both the server (during Server-Side Rendering) and the client (during hydration).\n\n**Description of the Error:**\n\nYou'll encounter a runtime error, typically a `ReferenceError` or an error indicating that a `next/server` module is not defined, when you try to use a function or component imported from `next/server` (e.g., `NextResponse`) within a page component's `page.js` file (or any other client-side rendered component).  This is because `next/server` modules are specifically designed for the server-side execution environment provided by Next.js Middleware or API routes.\n\n\n**Code and Step-by-Step Fix:**\n\nLet's say you have a function `redirectUser` in a file named `utils/redirect.js` that utilizes `NextResponse` from `next/server`:\n\n```javascript\n// utils/redirect.js (INCORRECT - will cause errors in page.js)\nimport { NextResponse } from 'next/server';\n\nexport function redirectUser(req, res, destination) {\n  return NextResponse.redirect(new URL(destination, req.url));\n}\n```\n\nAnd you attempt to use this function in your `page.js` file:\n\n```javascript\n// pages/my-page.js (INCORRECT - will cause errors)\nimport { redirectUser } from '../utils/redirect';\n\nexport default function MyPage() {\n  // ... other code ...\n  redirectUser(req, res, '/login'); // Error! req and res are undefined in the browser\n  // ... other code ...\n}\n```\n\nThis will fail because `req` and `res` objects are only available on the server.  The `NextResponse` object itself is also server-side only.\n\n**Correct Implementation:**\n\nTo solve this, separate server-side logic (using `next/server`) from client-side logic.  You can achieve this by creating an API route:\n\n1. **Create an API Route:** Create a file at `pages/api/redirect.js`:\n\n```javascript\n// pages/api/redirect.js\nimport { NextResponse } from 'next/server';\n\nexport default function handler(req, res) {\n  const destination = req.query.destination;\n  return NextResponse.redirect(new URL(destination || '/', req.url));\n}\n```\n\n2. **Call the API Route from your Page Component:**  Use `fetch` or a similar method to call the API route from your page component:\n\n```javascript\n// pages/my-page.js (CORRECT)\nexport default async function MyPage() {\n  // ... other code ...\n  const res = await fetch('/api/redirect?destination=/login');\n  if (!res.ok) {\n    // Handle error\n  }\n  // ... other code ...\n}\n\n```\n\n**Explanation:**\n\nBy separating the redirect logic into an API route, the `next/server` imports and server-side functionalities are confined to the server-side code. The client-side component interacts with the server using standard `fetch` calls. This approach ensures that the code runs correctly in both the server and client environments, avoiding runtime errors.\n\n**External References:**\n\n* [Next.js API Routes](https://nextjs.org/docs/api-routes/introduction)\n* [Next.js Middleware](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n* [Next.js Server Components](https://nextjs.org/docs/app/building-your-application/data-fetching/server-components)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":785,"title":"Next.js Middleware: Handling `next/server` Imports in Pages"}]
