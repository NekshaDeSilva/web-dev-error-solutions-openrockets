[{"body":"\nThis document addresses a common issue encountered when using the `dotenv` package in Node.js applications:  failure to load environment variables correctly, leading to runtime errors or unexpected behavior.  This often manifests as variables being `undefined` or containing incorrect values within your application.\n\n**Description of the Error:**\n\nThe most common error is encountering `ReferenceError: process is not defined` or seeing environment variables that you've defined in your `.env` file not being accessible in your code. This typically occurs when the `dotenv` package is not configured correctly or the `.env` file is misplaced or incorrectly formatted.  The application might run without throwing an explicit error, but will have incorrect values for crucial settings.\n\n**Code (Step-by-Step Fix):**\n\n\n**1. Installation:**\n\nEnsure `dotenv` is correctly installed. If not, run:\n\n```bash\nnpm install dotenv\n```\n\nor\n\n```bash\nyarn add dotenv\n```\n\n**2.  `.env` File Placement and Structure:**\n\nThe `.env` file *must* reside in the root directory of your Node.js project (the same directory as your `package.json` file).  Incorrect placement is a frequent cause of loading failures. The `.env` file follows a simple key-value pair format:\n\n```env\nDATABASE_URL=mongodb://localhost:27017/mydb\nPORT=3000\nAPI_KEY=your_api_key_here\n```\n\n**3. Loading Environment Variables:**\n\nAt the top of your main application file (e.g., `index.js`, `server.js`, or `app.js`), before any other code that uses these variables,  include the following:\n\n```javascript\nrequire('dotenv').config();\n```\n\nThis line loads the environment variables from the `.env` file into the `process.env` object.\n\n\n**4. Accessing Environment Variables:**\n\nAccess the variables using `process.env`:\n\n```javascript\nconst databaseUrl = process.env.DATABASE_URL;\nconst port = process.env.PORT;\nconst apiKey = process.env.API_KEY;\n\nconsole.log(`Database URL: ${databaseUrl}`);\nconsole.log(`Port: ${port}`);\nconsole.log(`API Key: ${apiKey}`);\n\n// Example usage in a server:\nconst express = require('express');\nconst app = express();\napp.listen(port, () => console.log(`Server running on port ${port}`));\n\n```\n\n**5.  `gitignore`:**\n\nCrucially, add `.env` to your `.gitignore` file to prevent your sensitive API keys and database credentials from being accidentally committed to your version control system.  Add this line to your `.gitignore`:\n\n```\n.env\n```\n\n\n**Explanation:**\n\nThe `dotenv` package reads the `.env` file, parsing key-value pairs into process environment variables.  These variables are then accessible through the global `process.env` object.  Incorrect placement of the `.env` file or failure to call `dotenv.config()` are the most common sources of problems.  Ignoring the `.env` file in git protects sensitive information.\n\n**External References:**\n\n* **`dotenv` npm package:** [https://www.npmjs.com/package/dotenv](https://www.npmjs.com/package/dotenv)\n* **Node.js documentation on `process.env`:** [https://nodejs.org/api/process.html#processenv](https://nodejs.org/api/process.html#processenv) (indirectly relevant)\n* **Git `.gitignore`:** [https://git-scm.com/docs/gitignore](https://git-scm.com/docs/gitignore)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":101,"title":"Troubleshooting `dotenv` Configuration in a Node.js Application"}]
