[{"body":"\n## Description of the Error\n\nA common issue when working with Next.js Middleware is incorrectly modifying the `headers` object within the `Response` object.  Middleware allows you to modify the request/response cycle before a page is rendered, but attempting to directly manipulate the `headers` property can lead to unexpected behavior or errors.  Specifically, you might find that modifications don't persist or that you receive runtime errors indicating the `headers` object is immutable.\n\nThis often happens when developers try to directly assign or modify header values like this:\n\n```javascript\n// Incorrect approach\nexport function middleware(req) {\n  const res = NextResponse.next();\n  res.headers.set('X-Custom-Header', 'some value'); // This will likely throw an error\n  return res;\n}\n```\n\n## Step-by-Step Code Fix\n\nThe correct way to modify response headers in Next.js Middleware involves using the `NextResponse.rewrite()` or `NextResponse.redirect()` methods, or updating the headers during the `NextResponse` object creation.\n\n\n**Method 1: Using `NextResponse` constructor**\n\nThis is the most straightforward approach, setting the header directly when you create the `NextResponse` object.\n\n```javascript\nimport { NextResponse } from 'next/server'\n\nexport function middleware(req) {\n  const url = req.nextUrl.clone(); // create a copy to avoid modifying original URL\n  const response = new NextResponse(null, {\n    headers: {\n      'X-Custom-Header': 'some value',\n      'Cache-Control': 'public, max-age=31536000',\n    },\n  });\n  return response;\n}\n```\n\n**Method 2:  Using `NextResponse.rewrite()` for maintaining the original request**\n\nIf you need to rewrite the request to a different URL while setting headers, use `NextResponse.rewrite()`:\n\n```javascript\nimport { NextResponse } from 'next/server'\n\nexport function middleware(req) {\n    const url = req.nextUrl.clone(); // create a copy to avoid modifying original URL\n    url.pathname = '/new-page'; // change the pathname\n    return NextResponse.rewrite(url, {\n        headers: {\n            'X-Custom-Header': 'some value from rewrite',\n        }\n    });\n}\n```\n\n**Method 3: Using `NextResponse.redirect()` for redirection**\n\nIf you need to redirect the user while adding headers, utilize `NextResponse.redirect()`:\n\n```javascript\nimport { NextResponse } from 'next/server'\n\nexport function middleware(req) {\n    return NextResponse.redirect(new URL('/redirected-page', req.url), {\n        headers: {\n            'X-Custom-Header': 'some value from redirect',\n            'Location': '/redirected-page' // Important for redirection. This is added automatically if you don't specify it.\n        }\n    });\n}\n```\n\n\n## Explanation\n\nDirectly manipulating the `headers` property of a `NextResponse` object after it has been created is not supported. The `NextResponse` object is immutable after creation. The methods described above correctly manage header additions and manipulations within the response lifecycle.  Using the constructor allows us to set headers during the response's initialization.  `NextResponse.rewrite()` and `NextResponse.redirect()` maintain the appropriate HTTP behaviors while integrating header modifications.\n\n\n## External References\n\n* [Next.js Middleware Documentation](https://nextjs.org/docs/app/api-routes/middleware)\n* [NextResponse API Reference](https://nextjs.org/docs/api-reference/next/server#nextresponse)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":1208,"title":"Next.js Middleware: Handling `headers` in the Response Object"}]
