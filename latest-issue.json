[{"body":"\nThis document addresses a common problem encountered when building applications using MongoDB, Express.js, React.js, and Next.js: handling 404 (Not Found) errors gracefully.  Specifically, we'll focus on routing issues where Next.js routes don't correctly map to your Express.js API endpoints, resulting in 404 errors on the client-side.\n\n## Description of the Error\n\nWhen a user attempts to access a route that doesn't exist in your Next.js application or your Express.js API, the client will receive a 404 error. This can manifest as a blank page, a generic error message, or a browser error message.  The problem often stems from inconsistencies between your frontend routing (Next.js) and your backend API routing (Express.js).  For example, a frontend route might expect data from `/api/data`, but the Express.js server might not have a route defined for that path.\n\n## Fixing the Problem Step-by-Step\n\nLet's assume we have a Next.js application fetching data from an Express.js API. The goal is to display a custom 404 page when the API returns a 404 status.\n\n**Step 1: Ensure Correct API Route Definition (Express.js)**\n\nFirst, verify that your Express.js API has the correct route defined.  Here's an example using a route that fetches data:\n\n```javascript\n// server.js (or equivalent)\nconst express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  // Fetch data from MongoDB or other source\n  const data = { message: 'Data fetched successfully!' };\n  res.json(data);\n});\n\n// ... other routes ...\n\napp.use((req, res) => {\n  res.status(404).json({ message: 'API Route Not Found' });\n})\n\nconst port = process.env.PORT || 3001; // Use a port different from Next.js\napp.listen(port, () => console.log(`Server listening on port ${port}`));\n```\n\n\n**Step 2: Implement Data Fetching in Next.js (React)**\n\nIn your Next.js page, use `useEffect` or `getStaticProps`/`getServerSideProps` to fetch data from your API.  Handle potential errors appropriately, including 404 errors.\n\n\n```javascript\nimport { useState, useEffect } from 'react';\n\nfunction MyPage() {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch('/api/data');\n        if (!res.ok) {\n          if (res.status === 404) {\n            throw new Error('Data not found'); //Specific error for 404\n          }\n          throw new Error(`HTTP error! status: ${res.status}`);\n        }\n        const data = await res.json();\n        setData(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error}</p>; // Display custom error message\n  if (!data) return <p>No data available</p>; // Handle case where data is null\n\n  return (\n    <div>\n      <h1>My Data</h1>\n      <p>{data.message}</p>\n    </div>\n  );\n}\n\nexport default MyPage;\n```\n\n\n**Step 3: Implement a Custom 404 Page (Next.js)**\n\nNext.js provides a built-in way to handle 404 pages. Create a file named `404.js` (or `pages/404.js`) in your `pages` directory:\n\n```javascript\nfunction Custom404() {\n  return (\n    <div>\n      <h1>404 - Page Not Found</h1>\n      <p>The page you are looking for does not exist.</p>\n    </div>\n  );\n}\n\nexport default Custom404;\n```\n\n**Step 4: Configure Next.js API routes (optional but recommended):**\n\nIf you are using API routes within `pages/api`, be sure to define your routes consistently.  In this example, `pages/api/data.js` would be the corresponding file to `/api/data`.\n\n\n## Explanation\n\nThis solution tackles the problem by:\n\n1. **Ensuring API route consistency:** The Express.js server correctly handles the `/api/data` route. A general 404 handler catches any requests that don't match defined routes.\n\n2. **Handling errors during data fetching:** The Next.js component uses `try...catch` to handle potential errors from the API call, including explicitly checking for 404 status codes.  It displays custom error messages instead of generic errors.\n\n3. **Custom 404 page:** Next.js's built-in 404 page mechanism provides a user-friendly experience when a route isn't found.\n\n\n## External References\n\n* [Next.js API Routes](https://nextjs.org/docs/api-routes/introduction)\n* [Next.js Error Handling](https://nextjs.org/docs/app/building-your-application/routing/error-handling)\n* [Express.js Routing](https://expressjs.com/en/guide/routing.html)\n* [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":410,"title":"Handling 404 Errors in a MERN Stack Application with Next.js"}]
