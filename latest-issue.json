[{"body":"\nThis document addresses a common issue developers encounter when using Next.js Middleware: attempting to import modules from `next/server` within client-side components.  This results in runtime errors because `next/server` modules are only available on the server during the request lifecycle, not in the browser.\n\n**Description of the Error:**\n\nYou might see an error like `ReferenceError: \"functionName\" is not defined` or a similar error indicating that a function or module imported from `next/server` (e.g., `next/server/headers`, `next/server/router`) is unavailable in the client-side context. This often happens when you unintentionally try to use server-side logic, like redirecting or manipulating headers, within a component rendered in the browser.\n\n**Code Example (Problematic):**\n\n```javascript\n// pages/my-page.js (Client Component)\nimport { NextResponse } from 'next/server'; // Incorrect import in client component\n\nexport default function MyPage() {\n  const redirect = () => {\n    NextResponse.redirect(new URL('/another-page', location.href)); // Error!\n  };\n\n  return (\n    <div>\n      <button onClick={redirect}>Redirect</button>\n    </div>\n  );\n}\n```\n\n**Fixing the Problem Step-by-Step:**\n\n1. **Identify the Client Component:**  Locate the component where the `next/server` import is causing the issue.  In the example above, it's `pages/my-page.js`.\n\n2. **Remove the `next/server` Import:**  Delete the import statement for `next/server` modules from the client component.  Client components should not directly interact with `next/server`.\n\n3. **Relocate the Logic (if necessary):** If the logic related to `next/server` (like redirection or header manipulation) is necessary, move it to the appropriate location:\n    * **Middleware:**  If the logic needs to apply to all requests or specific routes *before* rendering, place it in a middleware file (`middleware.js` or a route-specific middleware file).\n    * **API Route:** If the logic requires server-side processing and data fetching, use an API route (`pages/api/[...].js`).\n    * **GetServerSideProps/getServerSidePaths:** If the logic affects the data passed to the component, use these functions within your page component.\n\n\n**Corrected Code:**\n\n```javascript\n// middleware.js\nimport { NextResponse } from 'next/server';\n\nexport function middleware(req) {\n  const url = req.nextUrl.clone();\n  if (req.nextUrl.pathname === '/my-page') {\n    url.pathname = '/another-page';\n    return NextResponse.rewrite(url); // Redirect happens on the server\n  }\n}\n\nexport const config = {\n  matcher: ['/my-page'], // Only apply to /my-page\n};\n\n// pages/my-page.js (Client Component - now clean)\nexport default function MyPage() {\n  return (\n    <div>This page now works correctly!</div>\n  );\n}\n```\n\n**Explanation:**\n\nThe corrected code moves the redirection logic from the client component to a middleware function.  The middleware runs on the server before the page component is even rendered. This ensures that the `NextResponse` object is available in the correct context.  The `matcher` property in `config` is used to specify which routes the middleware will affect.  The client-side component is now free of server-side logic and only handles the display of content.\n\n\n**External References:**\n\n* [Next.js Middleware Documentation](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n* [Next.js API Routes Documentation](https://nextjs.org/docs/api-routes/introduction)\n* [Next.js Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components) (Relevant for more advanced server-side logic)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":1133,"title":"Next.js Middleware: Handling `next/server` Imports in Client Components"}]
