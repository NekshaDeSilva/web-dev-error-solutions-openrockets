[{"body":"\nThis document addresses a common problem encountered when developing Discord bots using the Discord.js library: **rate limits**.  Discord implements rate limits to prevent abuse and ensure the stability of its platform.  Exceeding these limits results in your bot being temporarily or permanently banned.\n\n## Description of the Error\n\nWhen your bot sends messages, edits messages, creates channels, or performs other actions too quickly, Discord will respond with a rate limit error. This error typically manifests as a `DiscordAPIError` with a code related to rate limiting (e.g., `10003`). Your bot might stop functioning, fail to send messages, or experience delays. The error message might include details like the remaining time before the rate limit resets.\n\n\n## Fixing Rate Limits Step-by-Step\n\nThis example demonstrates how to handle rate limits when sending messages.  We'll use `async/await` for cleaner code and error handling.\n\n**Step 1: Install Necessary Dependencies**\n\nYou'll need the `discord.js` library.  If you haven't already, install it:\n\n```bash\nnpm install discord.js\n```\n\n**Step 2: Implement Rate Limit Handling**\n\nThis code snippet shows how to gracefully handle rate limits using `try...catch` and a simple delay mechanism.  More sophisticated techniques might involve a queue system for buffered requests.\n\n\n```javascript\nconst { Client, GatewayIntentBits } = require('discord.js');\nconst client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages] });\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.tag}!`);\n});\n\n\nasync function sendMessageWithRateLimitHandling(channel, message) {\n  try {\n    await channel.send(message);\n  } catch (error) {\n    if (error.code === 50013) { // DiscordAPIError: 50013 - Missing Permissions\n      console.error(\"Bot lacks permissions to send messages in this channel!\");\n      return;\n    }\n\n    if (error.httpStatus === 429) { // Rate limit hit\n      const retryAfter = error.headers['retry-after'];\n      console.log(`Rate limited. Retrying after ${retryAfter}ms...`);\n      await new Promise(resolve => setTimeout(resolve, retryAfter)); // Wait before retrying\n      return sendMessageWithRateLimitHandling(channel, message); // Recursive call to retry\n    }\n    console.error(\"An unexpected error occurred:\", error);\n  }\n}\n\nclient.on('messageCreate', async msg => {\n  if (msg.content === '!test') {\n    await sendMessageWithRateLimitHandling(msg.channel, 'Hello from the rate-limit-aware bot!');\n  }\n});\n\n\nclient.login('YOUR_BOT_TOKEN'); // Replace with your bot token\n```\n\n**Step 3: Explanation**\n\n* The `sendMessageWithRateLimitHandling` function encapsulates the message sending logic.\n* It uses a `try...catch` block to handle potential errors.\n* If a `429` HTTP status code (rate limit) is encountered, it extracts the `retry-after` header (in milliseconds) and waits using `setTimeout`.\n* A recursive call to `sendMessageWithRateLimitHandling` retries sending the message after the delay. This is a simple retry mechanism; for more robust handling, consider a queue system.\n* The code also includes basic error handling for missing permissions (error code 50013).\n\n\n## External References\n\n* **Discord.js Documentation:** [https://discord.js.org/](https://discord.js.org/)  (Refer to the API documentation for details on error codes and event handling.)\n* **Discord API Rate Limits:**  [https://discord.com/developers/docs/topics/rate-limits](https://discord.com/developers/docs/topics/rate-limits) (Official Discord documentation on rate limits.)\n\n\n## Copyright (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":580,"title":"Handling Discord.js Rate Limits: A Step-by-Step Guide"}]
