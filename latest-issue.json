[{"body":"\nThis document addresses a common problem developers encounter when building APIs with Next.js API routes: **CORS (Cross-Origin Resource Sharing) errors**.  These errors occur when a client (e.g., a web browser making a fetch request from a different origin) tries to access your API route, and the server doesn't allow it.\n\n## Description of the Error\n\nThe error typically manifests as a browser console error message like:\n\n```\nAccess to XMLHttpRequest at 'https://your-nextjs-site.com/api/data' from origin 'https://your-client-site.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.\n```\n\nThis indicates that your API route is missing the necessary CORS headers to grant access from the client's origin.\n\n## Step-by-Step Code Fix\n\nLet's assume you have an API route at `/api/data` that returns some JSON data.  Here's how to fix the CORS issue:\n\n**1.  Add CORS Middleware:**\n\nThe most robust approach is to use middleware to handle CORS for all your API routes. This avoids repetition in each individual route handler.  Create a middleware file (e.g., `middleware.js` or `middleware.ts` inside the `pages/api` directory):\n\n```javascript\n// pages/api/middleware.js\nimport { NextResponse } from 'next/server'\n\nexport function middleware(req) {\n  const origin = req.headers.get('origin')\n\n  // Allow requests from specific origins.  Replace with your actual origins.\n  const allowedOrigins = ['https://your-client-site.com', 'http://localhost:3000'] \n\n  if (!allowedOrigins.includes(origin)) {\n    return new NextResponse(null, { status: 403 }) // Forbidden\n  }\n\n  return NextResponse.next({\n    headers: {\n      'Access-Control-Allow-Origin': origin,\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS', // Allow specific methods\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization', // Allow specific headers\n      'Access-Control-Max-Age': '86400', // Cache preflight requests for 24 hours\n    },\n  })\n}\n\nexport const config = {\n  matcher: '/api/:path*', // Match all API routes\n}\n```\n\n\n**2.  Your API Route (`pages/api/data.js`):**\n\nThis route remains largely unchanged.  The CORS headers are now handled by the middleware.\n\n```javascript\n// pages/api/data.js\nexport default function handler(req, res) {\n  res.status(200).json({ message: 'Hello from API Route!' })\n}\n```\n\n**Explanation:**\n\n* The middleware intercepts all requests to routes matching `/api/:path*`.\n* It checks if the request origin is allowed.  **Crucially**, you should replace `['https://your-client-site.com', 'http://localhost:3000']` with the actual origins your API should allow.  Using `*` is generally discouraged for security reasons.\n* If the origin is allowed, it adds the necessary CORS headers to the response.\n* `Access-Control-Allow-Origin` specifies the allowed origin(s).  `Access-Control-Allow-Methods` and `Access-Control-Allow-Headers` specify the allowed HTTP methods and headers, respectively.\n* `Access-Control-Max-Age` allows the browser to cache preflight requests, improving performance.\n\n\n## External References\n\n* [Next.js API Routes Documentation](https://nextjs.org/docs/api-routes/introduction)\n* [MDN Web Docs on CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n\n\n## Conclusion\n\nBy implementing this middleware, you ensure that your Next.js API routes handle CORS correctly, preventing errors and allowing your client-side applications to access your data seamlessly. Remember to replace the placeholder origins with your actual allowed origins.\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":808,"title":"Next.js API Routes: Handling CORS Errors"}]
