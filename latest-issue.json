[{"body":"\n## Description of the Error\n\nThe dreaded \"Module Not Found\" error in Node.js is a common issue that arises when your code attempts to use a module that Node.js cannot locate. This typically happens when the module isn't installed, the path to the module is incorrect, or there's a problem with your project's structure.  The error message usually looks something like this:\n\n```\nError: Cannot find module 'my-module'\nRequire stack:\n- /path/to/your/file.js\n```\n\nThis error means that your `require('my-module')` statement cannot find the `my-module` file or package.\n\n## Step-by-Step Code Fix\n\nLet's assume we're trying to use a hypothetical module called `my-module`, which we'll simulate for demonstration purposes.\n\n**Scenario 1: Module Not Installed**\n\nThis is the most frequent cause.  If `my-module` is an npm package, you need to install it first:\n\n1. **Open your terminal** and navigate to your project's root directory.\n2. **Install the package:**  Use `npm install my-module` (or `yarn add my-module`).\n\n**Scenario 2: Incorrect Path or File Name**\n\nIf `my-module` is a local file (not an npm package), ensure the path in your `require()` statement is correct.  Let's say `my-module.js` is in a `utils` directory within your project.\n\n**Incorrect:**\n\n```javascript\nconst myModule = require('my-module'); // Incorrect path\n```\n\n**Correct:**\n\n```javascript\nconst myModule = require('./utils/my-module'); // Correct relative path\n```\n\n**Scenario 3: Incorrect `package.json` (for local modules)**\n\nIf you have a local module, it needs to be declared in the `package.json` file within your project, so Node.js knows how to resolve it.\n\nLet's say `my-module.js` is in the root folder and exports a function.\n\n1. **Create `my-module.js`:**\n\n```javascript\n// my-module.js\nexports.myFunction = () => {\n  console.log(\"My module works!\");\n};\n```\n\n2. **Update your `package.json`:**  Add a `main` property pointing to your module's entry point.  If `my-module.js` is your main entry point, it can look like this:\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"my-module.js\", // This line is crucial\n  \"dependencies\": {},\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n}\n```\n\n3. **Require the module:**\n\n```javascript\nconst myModule = require('./my-module');\nmyModule.myFunction();\n```\n\n\n## Explanation\n\nNode.js uses a module resolution algorithm to find the required modules.  It searches in several places, including:\n\n* **node_modules:** This directory, present in most Node.js projects, contains all installed npm packages.\n* **Relative paths:** Paths starting with `./` or `../` search relative to the current file.\n* **Built-in modules:** Node.js has some built-in modules (like `fs`, `http`, `path`).\n\nIf none of these locations contain the module, the \"Module Not Found\" error occurs.\n\n## External References\n\n* [Node.js Module System Documentation](https://nodejs.org/api/modules.html)\n* [npm documentation](https://docs.npmjs.com/)\n* [Yarn documentation](https://yarnpkg.com/getting-started/install)\n\n\n## Copyright (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":105,"title":"Troubleshooting \"Module Not Found\" Errors in Node.js with `require()`"}]
