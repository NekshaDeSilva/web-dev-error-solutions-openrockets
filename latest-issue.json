[{"body":"\nThis document addresses a common error developers encounter when working with Next.js Middleware: importing modules from `next/server`. This error typically occurs when developers attempt to use server-side-only modules in client-side components or pages.\n\n**Description of the Error:**\n\nThe error usually manifests as a runtime error or a build-time error, indicating that a module from `next/server` (e.g., `NextResponse`, `Headers`) is being accessed in a context where it's not available.  You'll see error messages like:\n\n* `ReferenceError: NextResponse is not defined`\n* `Module not found: Can't resolve 'next/server' in ...`\n* Build errors related to incompatible modules\n\n**Full Code of Fixing Step by Step:**\n\nLet's consider a scenario where you're trying to use `NextResponse` in a component that also renders on the client-side:\n\n**Incorrect Code (Problem):**\n\n```javascript\n// pages/my-page.js\nimport { NextResponse } from 'next/server';\n\nexport default function MyPage() {\n  const response = new NextResponse('Hello from client!'); // Incorrect - NextResponse is server-side only\n  return <div>My Page {response.body}</div>;\n}\n```\n\n**Correct Code (Solution):**\n\nThe solution involves separating server-side logic (using `next/server`) from client-side rendering.  We'll use Middleware for the server-side logic and a regular component for client-side display.\n\n**Step 1: Create a Middleware function:**\n\n```javascript\n// middleware.js\nimport { NextResponse } from 'next/server';\n\nexport function middleware(req) {\n  const url = req.nextUrl.clone();\n  url.pathname = '/api/data'; // Redirect to an API route\n\n  return NextResponse.rewrite(url);\n}\n\nexport const config = {\n  matcher: ['/my-page'], // Apply this middleware only to /my-page\n};\n```\n\n**Step 2: Create an API Route to handle the logic:**\n\n```javascript\n// pages/api/data.js\nexport default function handler(req, res) {\n  res.status(200).json({ message: 'Hello from server!' });\n}\n```\n\n**Step 3: Update the Client-Side Component:**\n\n```javascript\n// pages/my-page.js\nimport useSWR from 'swr';\n\nexport default function MyPage() {\n  const { data, error } = useSWR('/api/data');\n\n  if (error) return <div>failed to load</div>;\n  if (!data) return <div>loading...</div>;\n\n  return <div>My Page: {data.message}</div>;\n}\n```\n\n\n**Explanation:**\n\n* **Middleware:** We moved the `NextResponse` usage to `middleware.js`. This ensures it only runs on the server. The middleware redirects requests to `/my-page` to the API route `/api/data`.\n* **API Route:**  The API route handles the server-side logic and returns data in a format that the client can understand (JSON).\n* **Client-side Component:** The `MyPage` component now uses `useSWR` (you might need to install it: `npm install swr`) to fetch data from the API route. This keeps the client-side logic clean and focused on rendering the data.  This avoids the `next/server` import error entirely.\n\n**External References:**\n\n* [Next.js Middleware Documentation](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n* [Next.js API Routes Documentation](https://nextjs.org/docs/api-routes/introduction)\n* [SWR Documentation](https://swr.vercel.app/)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":866,"title":"Next.js Middleware: Handling `next/server` Import Errors"}]
