[{"body":"\n**Description of the Error:**\n\nCross-Origin Resource Sharing (CORS) errors occur when a web application (typically running on a different domain than the API it's trying to access) makes a request to an API that doesn't have the necessary CORS headers configured.  This typically manifests as a `CORS policy` error in your browser's developer console.  In Next.js, this is common when you have a frontend (e.g., a Next.js application) making requests to an API route within the same Next.js application. Even though both reside in the same project, the browser still treats them as different origins during development.\n\n**Code (Step-by-Step Fix):**\n\nLet's assume you have a Next.js API route (`pages/api/hello.js`) and a frontend component that fetches data from it.\n\n**1. The Problematic API Route (`pages/api/hello.js`):**\n\n```javascript\n// pages/api/hello.js\nexport default function handler(req, res) {\n  res.status(200).json({ text: 'Hello from API route!' });\n}\n```\n\nThis route, as it stands, lacks the necessary CORS headers.\n\n**2. Adding CORS Headers to the API Route:**\n\n```javascript\n// pages/api/hello.js\nexport default function handler(req, res) {\n  res.setHeader('Access-Control-Allow-Origin', '*'); // Allow requests from any origin during development\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS'); // Allow GET, POST, and preflight OPTIONS requests\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization'); // Allow specific headers\n  res.status(200).json({ text: 'Hello from API route!' });\n}\n```\n\nWe've added three crucial headers:\n\n* `Access-Control-Allow-Origin`: This header specifies which origins are allowed to access the API.  `*` allows all origins, but **for production, you should replace this with the specific origin of your frontend application** to enhance security.\n* `Access-Control-Allow-Methods`: This specifies the HTTP methods allowed (GET, POST, etc.).\n* `Access-Control-Allow-Headers`: This specifies which headers are allowed in requests.\n\n\n**3. The Frontend Component (example using `fetch`):**\n\n```javascript\n// pages/index.js\nimport { useEffect, useState } from 'react';\n\nexport default function Home() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetch('/api/hello');\n      const json = await res.json();\n      setData(json);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      {data ? <pre>{JSON.stringify(data, null, 2)}</pre> : <p>Loading...</p>}\n    </div>\n  );\n}\n```\n\nThis component fetches data from `/api/hello` and displays it.\n\n**Explanation:**\n\nBy adding the CORS headers to the API route, we explicitly tell the browser which domains are permitted to make requests to our API.  The `Access-Control-Allow-Origin: '*'` is a wildcard allowing requests from any domain which is convenient for development. In a production environment, you must replace `'*'` with your frontend's domain for security reasons.  The other headers handle preflight requests (OPTIONS requests) and specify allowed methods and headers, preventing further CORS issues.\n\n**External References:**\n\n* [Next.js API Routes](https://nextjs.org/docs/api-routes/introduction)\n* [MDN Web Docs: CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n\n\n**Copyright (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.**\n","number":119,"title":"Handling CORS Errors in a Next.js API Route"}]
