[{"body":"\nThis document addresses a common problem encountered in Node.js projects, particularly when using `require()` to import modules: the \"Module not found\" error.  This error occurs when Node.js cannot locate the module you're trying to import.\n\n**Description of the Error:**\n\nThe error message typically looks something like this:\n\n```\nError: Cannot find module 'module-name'\n    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:933:15)\n    at Function.Module._load (node:internal/modules/cjs/loader:778:27)\n    // ... more stack trace ...\n```\n\nReplace `module-name` with the actual name of the module you're trying to import. This error signifies that Node.js can't find the specified module in its search path.\n\n**Code & Step-by-Step Fix:**\n\nLet's assume you have a file `my-module.js` containing:\n\n```javascript\n// my-module.js\nmodule.exports = {\n  hello: () => console.log('Hello from my module!')\n};\n```\n\nAnd you're trying to use it in `main.js`:\n\n```javascript\n// main.js\nconst myModule = require('./my-module.js');\nmyModule.hello();\n```\n\nIf you run `node main.js` and get the \"Module not found\" error, here's how to troubleshoot:\n\n**Step 1: Verify File Path and Name**\n\nDouble-check the path `'./my-module.js'` in `main.js`.  Make absolutely sure the filename and path are correct, including case sensitivity (important on Linux/macOS).  Incorrect casing or a typo is a frequent cause.\n\n**Step 2:  Check File Existence**\n\nEnsure `my-module.js` actually exists in the same directory as `main.js`.  If it's in a different directory, adjust the path accordingly (e.g., `require('../path/to/my-module.js')`).\n\n**Step 3:  `node_modules` and `npm install` (for external modules)**\n\nIf `my-module.js` is an external module you installed via npm, make sure you've run `npm install` (or `yarn install`) in your project's root directory.  The module should be installed in the `node_modules` directory.  Then, you would use the module name directly (without the path):\n\n```javascript\n// For example, using Lodash:\nconst _ = require('lodash');\nconsole.log(_.capitalize('hello'));\n```\n\n**Step 4:  Check `package.json` (for external modules)**\n\nIf you are still getting the error for an external module, ensure it is listed as a dependency in your `package.json` file under `dependencies` or `devDependencies`.\n\n**Step 5:  Relative vs. Absolute Paths**\n\nConsider using absolute paths for clarity, especially in larger projects.  This avoids ambiguity about the module's location:\n\n```javascript\nconst path = require('path');\nconst myModule = require(path.join(__dirname, 'my-module.js'));\n```\n\n`__dirname` gives you the absolute path of the current directory.\n\n\n**Explanation:**\n\nNode.js uses a module resolution algorithm to find required modules.  It starts by looking in the current directory, then checks the `node_modules` folder, and finally follows any parent directories until it finds the module or gives up.  The error occurs when the module is not found along this search path.\n\n**External References:**\n\n* [Node.js Documentation on Modules](https://nodejs.org/api/modules.html)\n* [npm Documentation](https://docs.npmjs.com/)\n\n\n**Copyright (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.**\n","number":116,"title":"Troubleshooting \"Module Not Found\" Errors in Node.js with `require()`"}]
