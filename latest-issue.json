[{"body":"\nThis document describes a common problem faced by developers using Next.js: Cross-Origin Resource Sharing (CORS) errors.  These errors occur when a web application (the client, typically your Next.js frontend) attempts to make requests to a different domain than the one it's served from (the server, potentially an API you've built separately).  Browsers enforce CORS policies to prevent malicious scripts from accessing data from other sites without proper authorization.\n\n\n## Description of the Error\n\nThe error typically manifests as a message similar to:\n\n`Access to XMLHttpRequest at 'https://your-api-endpoint.com/data' from origin 'https://your-nextjs-app.vercel.app' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.`\n\nThis means your Next.js frontend (running on `your-nextjs-app.vercel.app`) is trying to fetch data from your API (`your-api-endpoint.com`), but the API server doesn't allow requests from that origin.\n\n\n## Fixing the CORS Error Step-by-Step\n\nThis example demonstrates fixing the CORS error assuming your API is built with Node.js and Express.js.  The fix involves adding CORS middleware to your Express.js server.\n\n**1. Install the `cors` package:**\n\n```bash\nnpm install cors\n```\n\n**2.  Modify your Express.js server:**\n\n```javascript\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\nconst port = 3001; // Or your API's port\n\n// Add this line to enable CORS\napp.use(cors());\n\n// Your API routes\napp.get('/data', (req, res) => {\n  res.json({ message: 'Data from your API' });\n});\n\napp.listen(port, () => {\n  console.log(`API listening on port ${port}`);\n});\n```\n\n**Explanation of the Code:**\n\nThe `cors()` middleware from the `cors` package is added using `app.use(cors())`. This middleware intercepts all incoming requests and adds the necessary `Access-Control-Allow-Origin` header to the response.  By default, `cors()` allows requests from all origins (`*`).  For production, you should configure it to only allow specific origins for security reasons.  For example:\n\n```javascript\napp.use(cors({\n  origin: 'https://your-nextjs-app.vercel.app', // Only allow requests from your Next.js app\n  methods: ['GET', 'POST', 'PUT', 'DELETE'], // Specify allowed HTTP methods\n  allowedHeaders: ['Content-Type', 'Authorization'], // Specify allowed headers\n}));\n\n```\n\n\n**3. Restart your API server.**  This will apply the CORS middleware changes.\n\n**4. Test your Next.js application.** The requests from your Next.js frontend should now succeed without CORS errors.\n\n\n## External References\n\n* **CORS specification:** [https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n* **Express.js CORS middleware:** [https://www.npmjs.com/package/cors](https://www.npmjs.com/package/cors)\n\n\n## Explanation\n\nCORS errors are a crucial security feature.  By default, browsers prevent requests to other domains to protect users from malicious websites.  The `Access-Control-Allow-Origin` header explicitly tells the browser which origins are allowed to make requests to your API.  It's important to carefully configure this header, especially in production environments, to avoid security vulnerabilities.  Using a wildcard (`*`) allows all origins which may be insecure.\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":168,"title":"Handling CORS Errors in a Next.js Application"}]
