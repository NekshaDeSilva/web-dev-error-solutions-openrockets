[{"body":"\nThis document addresses a common error encountered when working with Next.js Middleware: attempting to import modules from `next/server` outside the middleware files themselves.  This results in runtime errors because these modules are specifically designed for the server-side rendering process within the middleware context.\n\n## Description of the Error\n\nWhen you try to import functions or components from the `next/server` package (e.g., `NextResponse`, `NextRequest`) in a regular component file or API route, you'll typically encounter an error similar to:\n\n```\nError: Cannot find module 'next/server' or its corresponding type declarations.\n```\n\nThis happens because the `next/server` modules are not available in the client-side or API route contexts, only within the middleware environment.\n\n## Code: Fixing Step-by-Step\n\nLet's say you have a function `redirectToLogin` that you want to use both in a middleware file and a regular page.  Incorrect implementation:\n\n**Incorrect Approach (Will Fail):**\n\n```javascript\n// pages/login.js\nimport { redirect } from 'next/server'; // INCORRECT - This will throw an error\n\nexport default function LoginPage() {\n  return <p>Login Page</p>;\n}\n\n//middleware.js\nimport { NextResponse } from 'next/server';\n\nexport function middleware(req) {\n    const url = req.nextUrl.clone()\n    url.pathname = '/login'\n    return NextResponse.rewrite(url)\n}\n```\n\n\n**Correct Approach:**\n\n\n```javascript\n// utils/redirect.js (create a utility file)\nexport const redirectToLogin = (req, res) => {\n  // Depending on your environment choose the appropriate redirection method.\n  if (typeof window === 'undefined'){ // Server-side (middleware)\n      const url = req.nextUrl.clone()\n      url.pathname = '/login'\n      return NextResponse.rewrite(url);\n  } else { //Client-side\n    window.location.href = '/login'; //Client-side redirection\n  }\n};\n\n\n// middleware.js\nimport { redirectToLogin } from '../utils/redirect';\n\nexport function middleware(req) {\n  return redirectToLogin(req);\n}\n\n// pages/some-page.js\nimport { redirectToLogin } from '../utils/redirect';\n\n\nexport default function SomePage() {\n  if (someCondition) { // Example condition\n    redirectToLogin(null); // Pass null as the first argument as the req and res object will not be needed in the client side\n  }\n  return <p>Some Page</p>;\n}\n```\n\n\n## Explanation\n\nThe corrected code separates the redirection logic into a utility function (`redirectToLogin`). This function checks if it's running server-side (`typeof window === 'undefined'`). If server-side (within middleware), it uses `NextResponse.rewrite`.  If client-side, it uses `window.location.href` for redirection.  This approach ensures compatibility across both middleware and client-side code.\n\n## External References\n\n* **Next.js Middleware Documentation:** [https://nextjs.org/docs/app/building-your-application/routing/middleware](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n* **Next.js API Routes Documentation:** [https://nextjs.org/docs/api-routes/introduction](https://nextjs.org/docs/api-routes/introduction)\n* **NextResponse Object:** [https://nextjs.org/docs/api-reference/next/server#nextresponse](https://nextjs.org/docs/api-reference/next/server#nextresponse) (look for details on `rewrite`)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":1113,"title":"Next.js Middleware: Handling `next/server` Imports Outside of Middleware"}]
