[{"body":"\n## Description of the Error\n\nA common issue in Next.js Middleware is how to gracefully handle `404` (Not Found) errors.  If a request hits middleware and doesn't match any defined routes, the middleware might not explicitly return a `404` response, leading to unexpected behavior or potentially leaving the user hanging with a blank page or a confusing error.  This is especially problematic if you rely on middleware to modify or redirect requests.  Without explicit `404` handling, the default Next.js behavior might not be ideal for your application.  For example, you might want to serve a custom `404` page rather than the default Next.js error page.\n\n## Fixing Step-by-Step\n\nLet's assume we have middleware that redirects specific paths and we want to serve a custom `404` for any other path.\n\n**Step 1: Create a custom `404` page.**\n\nCreate a file named `404.js` (or `404.tsx`) in your `pages` directory with the following content:\n\n```jsx\n// pages/404.js\nexport default function Custom404() {\n  return (\n    <div>\n      <h1>404 - Page Not Found</h1>\n      <p>The page you are looking for does not exist.</p>\n    </div>\n  );\n}\n```\n\n**Step 2: Implement Middleware with `404` Handling.**\n\nCreate (or modify) your middleware file (e.g., `middleware.js` or `middleware.ts` in the `pages` directory or a dedicated `middleware` directory).  The key is to explicitly return a response for paths that don't match your intended logic.\n\n```javascript\n// middleware.js\nimport { NextResponse } from 'next/server'\n\nexport function middleware(req) {\n  const url = req.nextUrl.clone()\n\n  //Example redirection to handle a specific path.\n  if (req.nextUrl.pathname === '/old-page') {\n    url.pathname = '/new-page'\n    return NextResponse.rewrite(url)\n  }\n\n\n  // Check if the request matches a specific path. If not, return a 404.\n  const allowedPaths = ['/', '/about', '/contact'];\n  if (!allowedPaths.includes(req.nextUrl.pathname)) {\n    return NextResponse.rewrite(new URL('/404', req.url))\n  }\n\n  return NextResponse.next()\n}\n\nexport const config = {\n  matcher: '/', // Match all paths. Adjust as needed.\n}\n```\n\n**Explanation:**\n\n* We import `NextResponse` from `next/server`.\n* The `middleware` function intercepts requests.\n* The code checks if the request's pathname matches a list of allowed paths.\n* If the pathname is *not* in `allowedPaths`, it creates a new URL pointing to `/404` using `new URL('/404', req.url)` and returns a `NextResponse.rewrite` directing the user to the custom 404 page.\n* `NextResponse.next()` allows the request to continue to the next handler if it's not a 404.\n* `matcher: '/'` in the `config` object specifies that the middleware applies to all paths. Adjust this if you want to apply middleware to a subset of paths.\n\n## External References\n\n* [Next.js Middleware documentation](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n* [NextResponse API Reference](https://nextjs.org/docs/api-reference/next/server#nextresponse)\n\n\n## Explanation\n\nThis approach ensures that any request not explicitly handled in the middleware is gracefully redirected to a custom 404 page. This provides a better user experience compared to the default Next.js error handling for unmatched routes.  Remember to adjust the `allowedPaths` array and the `matcher` configuration to match your application's routing structure.\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":1107,"title":"Next.js Middleware: Handling `404` Errors Gracefully"}]
