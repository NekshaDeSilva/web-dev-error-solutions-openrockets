[{"body":"\nThis document addresses a common problem encountered when developing Discord bots using the Discord.js library: rate limits.  Discord implements rate limits to prevent abuse and ensure the stability of its platform.  Exceeding these limits results in errors, often preventing your bot from functioning correctly.\n\n**Description of the Error:**\n\nWhen your bot sends messages, edits messages, or performs other actions too frequently, Discord will respond with a rate limit error.  This typically manifests as a `DiscordAPIError` with a code indicating the rate limit has been exceeded, often accompanied by a `retryAfter` property specifying how long to wait before retrying the action.  The error message might look something like this:\n\n```\nDiscordAPIError: 429: Too Many Requests\n    at RequestHandler.execute (/path/to/node_modules/discord.js/src/rest/RequestHandler.js:313:13)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n```\n\n\n**Full Code of Fixing Step-by-Step:**\n\nThis example demonstrates handling rate limits using `setTimeout` for simple cases.  For more complex scenarios, consider using a dedicated rate limiting library like `bottleneck`.\n\n\n**Step 1: Basic Error Handling**\n\nThis code wraps the message sending operation in a `try...catch` block to catch the `DiscordAPIError`.\n\n```javascript\nconst { Client, IntentsBitField } = require('discord.js');\nconst client = new Client({ intents: [IntentsBitField.Flags.Guilds, IntentsBitField.Flags.GuildMessages] });\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.tag}!`);\n});\n\nclient.on('messageCreate', async msg => {\n  if (msg.content === '!hello') {\n    try {\n      await msg.reply('Hello there!');\n    } catch (error) {\n      if (error instanceof DiscordAPIError && error.code === 50007){\n        console.error(\"Rate limited! Message not sent. Retrying...\")\n        setTimeout(() => {\n          msg.reply(\"Hello there!\")\n        }, error.retryAfter * 1000);  \n      }\n      else{\n        console.error('An error occurred:', error);\n      }\n    }\n  }\n});\n\nclient.login('YOUR_BOT_TOKEN');\n```\n\n\n**Step 2: Using `retryAfter` for Precise Timing**\n\nThe improved code uses the `retryAfter` property from the error to determine the exact waiting time before retrying:\n\n```javascript\nconst { Client, IntentsBitField, DiscordAPIError } = require('discord.js');\n// ... (rest of the code remains the same)\n\nclient.on('messageCreate', async msg => {\n  // ... (if statement remains the same)\n    try {\n      await msg.reply('Hello there!');\n    } catch (error) {\n      if (error instanceof DiscordAPIError && error.code === 429) {\n        console.error(`Rate limited! Retrying after ${error.retryAfter} seconds...`);\n        setTimeout(async () => {\n          try {\n            await msg.reply('Hello there!');\n          } catch (retryError) {\n            console.error('Retry failed:', retryError);\n          }\n        }, error.retryAfter * 1000);\n      } else {\n        console.error('An error occurred:', error);\n      }\n    }\n  }\n});\n// ... (rest of the code remains the same)\n\n```\n\n**Explanation:**\n\nThe code first attempts to send a message. If a `DiscordAPIError` with code 429 (Too Many Requests) is caught, it logs the error, extracts the `retryAfter` value (in seconds), and uses `setTimeout` to schedule a retry after the specified delay.  The retry includes another `try...catch` block to handle potential further errors during the retry attempt.  Crucially we are only retrying the *same* message send.\n\n\n**External References:**\n\n* **Discord.js Documentation:** [https://discord.js.org/](https://discord.js.org/) (Look for sections on error handling and rate limits)\n* **Discord API Rate Limits:** [https://discord.com/developers/docs/topics/rate-limits](https://discord.com/developers/docs/topics/rate-limits) (Official Discord documentation on rate limits)\n* **Bottleneck Library:** [https://github.com/Sannis/bottleneck](https://github.com/Sannis/bottleneck) (A more robust rate limiting library for Node.js)\n\n\n**Note:**  The provided solutions use simple `setTimeout` for demonstration. For production bots, using a more sophisticated library like `bottleneck` is highly recommended to handle complex rate limit scenarios and queuing of requests efficiently.\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":550,"title":"Handling Discord.js Rate Limits: A Step-by-Step Guide"}]
