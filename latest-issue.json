[{"body":"\nThis document addresses a common error encountered when using Next.js Middleware:  `Error: NextResponse.redirect() called outside a middleware`. This error arises when you attempt to use `NextResponse.redirect()` from a location within your Next.js application where it's not supported.  `NextResponse.redirect()` is specifically designed for use within middleware functions.\n\n\n**Description of the Error:**\n\nThe error message `Error: NextResponse.redirect() called outside a middleware` clearly indicates that you're trying to use the `NextResponse.redirect()` method from a place other than a middleware function. This method is part of the Next.js API for manipulating responses within the middleware lifecycle, and attempting to use it elsewhere will result in this error.\n\n\n**Code Example Demonstrating the Error and its Fix:**\n\nLet's illustrate this with an example. Suppose you have a `pages/api/redirect.js` file (an API route, not a middleware):\n\n```javascript\n// pages/api/redirect.js (INCORRECT - will throw the error)\nimport { NextResponse } from 'next/server';\n\nexport function POST(req) {\n  return NextResponse.redirect(new URL('/about', req.url));\n}\n```\n\nThis code will throw the error because it's trying to use `NextResponse.redirect()` within an API route, not a middleware.\n\n**Step-by-step Fix:**\n\nTo correctly redirect, you must move the redirection logic into a middleware function.  Here's how to do it:\n\n1. **Create a middleware file:** Create a file named `middleware.js` (or any filename ending in `.js`) inside the `pages` directory.\n\n2. **Import necessary modules:**\n\n```javascript\n// pages/middleware.js\nimport { NextResponse } from 'next/server'\n```\n\n3. **Implement the redirection logic:**\n\n```javascript\n// pages/middleware.js\nimport { NextResponse } from 'next/server'\n\nexport function middleware(req) {\n  const url = req.nextUrl.clone();\n\n  // Check if the request path matches a specific route\n  if (req.nextUrl.pathname === '/api/redirect') {\n    url.pathname = '/about'; //Redirect to /about\n    return NextResponse.redirect(url);\n  }\n\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: '/api/redirect', // only match /api/redirect route\n};\n```\n\nNow, any request to `/api/redirect` will be intercepted by the middleware and redirected to `/about`.\n\n\n**Explanation:**\n\nThe key difference lies in the context.  Middleware functions execute *before* a request reaches the page or API route, allowing you to modify the request or response.  API routes and page components execute *after* the middleware has had a chance to process the request. Using `NextResponse` in the correct context (Middleware) is crucial for this to work.  The `matcher` property in the `config` object is essential; it tells Next.js which paths the middleware should intercept. Without it, the middleware could potentially intercept and interfere with other parts of your application.\n\n\n**External References:**\n\n* [Next.js Middleware Documentation](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n* [NextResponse API Reference](https://nextjs.org/docs/api-reference/next/server#nextresponse)\n\n\n**Copyright (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.**\n","number":1228,"title":"Handling `Error: NextResponse.redirect() called outside a middleware` in Next.js Middleware"}]
