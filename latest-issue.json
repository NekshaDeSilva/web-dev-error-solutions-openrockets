[{"body":"\nThis document addresses a common error encountered when working with Next.js Middleware:  `Error: Cannot find module 'next/server'` or similar import errors related to `next/server` modules. This typically happens when attempting to use Middleware features in pages that are not intended for server-side rendering or when the wrong import path is used.\n\n**Description of the Error:**\n\nThe `next/server` module contains functionalities specifically designed for server-side operations within Next.js, like Middleware and API routes.  Trying to import these functions into client-side components (e.g., `.js`, `.jsx`, `.tsx` files that are rendered in the browser) leads to the `Cannot find module 'next/server'` error. This is because the `next/server` module is not available in the client-side environment.\n\n**Code Example & Step-by-Step Fix:**\n\nLet's say you have a file named `pages/my-page.js` and incorrectly try to import and use `NextResponse` from `next/server` within it:\n\n\n**Incorrect Code (pages/my-page.js):**\n\n```javascript\n// pages/my-page.js  (INCORRECT)\nimport { NextResponse } from 'next/server';\n\nexport default function MyPage() {\n  // Attempting to use NextResponse on the client-side\n  const response = new NextResponse('Hello from client-side');  // Error!\n  return <p>Hello</p>;\n}\n```\n\nThis will throw the `Cannot find module 'next/server'` error.\n\n**Correct Code (middleware.js):**\n\nTo fix this, you need to move the code that utilizes `NextResponse` to a Middleware file.  Let's create a middleware file:\n\n\n```javascript\n// middleware.js (CORRECT)\nimport { NextResponse } from 'next/server';\n\nexport function middleware(req) {\n  const res = NextResponse.rewrite(new URL('/new-page', req.url));\n  return res;\n}\n\nexport const config = {\n  matcher: ['/my-page'], // Apply this middleware only to /my-page\n};\n```\n\nNow, `pages/my-page.js` is free from server-side specific imports:\n\n```javascript\n// pages/my-page.js (CORRECT)\nexport default function MyPage() {\n  return <p>Hello from MyPage</p>;\n}\n```\n\nThis setup correctly uses `NextResponse` within a Middleware function, leaving the client-side component clean and error-free.  The `matcher` property in the `config` object specifies which routes the middleware applies to.\n\n\n\n**Explanation:**\n\nThe core issue is the separation of concerns between client-side and server-side code in Next.js.  `next/server` is specifically for the server environment.  By moving the server-side logic (using `NextResponse` in this case) to a Middleware file, you ensure that the code is executed on the server, where the necessary modules are available.  The client-side component then only handles rendering the UI, preventing the import error.\n\n**External References:**\n\n* **Next.js Middleware Documentation:** [https://nextjs.org/docs/app/building-your-application/routing/middleware](https://nextjs.org/docs/app/building-your-application/routing/middleware)  (Refer to this for the most up-to-date information.)\n* **Next.js API Routes Documentation:** [https://nextjs.org/docs/api-routes/introduction](https://nextjs.org/docs/api-routes/introduction) (Relevant for understanding server-side code in Next.js)\n\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":1174,"title":"Next.js Middleware: Handling `next/server` Import Errors"}]
