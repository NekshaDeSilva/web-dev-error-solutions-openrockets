[{"body":"\nThis document addresses a common `TypeError` encountered when using Next.js Middleware, specifically when attempting to access properties of the `req.cookies` object before verifying its existence.  This often happens when trying to determine user locale or other session-related data from cookies.\n\n## Description of the Error\n\nThe error message `TypeError: Cannot read properties of undefined (reading 'locale')` indicates that you're trying to access the `locale` property (or a similar property) of the `req.cookies` object before ensuring it's defined.  This happens because `req.cookies` might be `undefined` if no cookies are present in the request, leading to the error when your code attempts to read a property from it.\n\n\n## Code Example:  Problem & Solution\n\n**Problematic Code:**\n\n```javascript\n// pages/api/middleware.js\nexport default function middleware(req, res) {\n  const locale = req.cookies.locale; // Error occurs here if req.cookies is undefined\n\n  if (locale === 'es') {\n    // Redirect to Spanish version\n    res.redirect('/es');\n  } else {\n    // Continue to default\n  }\n}\n```\n\n**Step-by-Step Solution:**\n\n1. **Check for Cookie Existence:** Before accessing properties of `req.cookies`, always verify it's defined and contains the expected key.\n\n2. **Use Optional Chaining:**  Next.js 13 and above make this significantly easier using optional chaining (`?.`):\n\n```javascript\n// pages/api/middleware.js\nimport { NextResponse } from 'next/server'\n\nexport function middleware(req) {\n  const locale = req.cookies?.locale;\n\n  if (locale === 'es') {\n    return NextResponse.redirect(new URL('/es', req.url))\n  }\n\n  //Add other language checks\n  if (locale === 'fr') {\n    return NextResponse.redirect(new URL('/fr', req.url))\n  }\n\n}\n\nexport const config = {\n  matcher: '/',\n}\n\n```\n\n3. **Use Default Value (Alternative):** You can provide a default value if the cookie isn't found using the nullish coalescing operator (`??`):\n\n```javascript\n// pages/api/middleware.js\nimport { NextResponse } from 'next/server'\n\nexport function middleware(req) {\n  const locale = req.cookies?.locale ?? 'en'; // Default to 'en' if no locale cookie\n\n  if (locale === 'es') {\n    return NextResponse.redirect(new URL('/es', req.url))\n  }\n\n  //Add other language checks\n  if (locale === 'fr') {\n    return NextResponse.redirect(new URL('/fr', req.url))\n  }\n\n}\n\nexport const config = {\n  matcher: '/',\n}\n```\n\n\n## Explanation\n\nThe optional chaining operator (`?.`) prevents the error by safely accessing properties of an object only if the object itself is defined.  If `req.cookies` is `undefined`, the expression `req.cookies?.locale` evaluates to `undefined` without throwing an error. The nullish coalescing operator (`??`) provides a fallback value if the left-hand operand is `null` or `undefined`.\n\n\n## External References\n\n* [Next.js Middleware Documentation](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n* [Optional Chaining Operator (?.)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining)\n* [Nullish Coalescing Operator (??)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":890,"title":"Next.js Middleware: Handling `TypeError: Cannot read properties of undefined (reading 'locale')`"}]
