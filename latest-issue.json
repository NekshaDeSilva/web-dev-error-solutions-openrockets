[{"body":"\n## Description of the Error\n\nThe `DiscordAPIError: 429` error in Discord.js signifies that your bot has exceeded Discord's rate limits for API requests.  Discord imposes these limits to prevent abuse and ensure the stability of its platform.  This error typically manifests as an HTTP 429 response from the Discord API, indicating that your bot needs to slow down its requests.  Ignoring rate limits can lead to temporary or permanent bans of your bot.\n\n\n## Fixing the Error Step-by-Step\n\nThis example demonstrates how to handle rate limits using `node-fetch` (which is not necessarily required by Discord.js, but it showcases the explicit handling of rate-limit headers).  For simpler projects, you might just rely on Discord.js's built-in retry mechanisms which it often implements implicitly.  However, for complex bots or situations needing more granular control, explicit handling is best.\n\n**Step 1: Install `node-fetch`**\n\n```bash\nnpm install node-fetch\n```\n\n**Step 2: Implement Rate Limit Handling**\n\n```javascript\nconst { Client, IntentsBitField } = require('discord.js');\nconst fetch = require('node-fetch');\n\nconst client = new Client({ intents: [IntentsBitField.Flags.Guilds] }); // Add necessary intents\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.tag}!`);\n});\n\nasync function sendMessage(channel, message) {\n  try {\n    const response = await fetch(`https://discord.com/api/v10/channels/${channel.id}/messages`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bot ${process.env.DISCORD_BOT_TOKEN}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ content: message }),\n    });\n\n    if (!response.ok) {\n      if (response.status === 429) {\n        const rateLimitData = await response.json();\n        const retryAfter = rateLimitData.retry_after;\n        console.warn(`Rate limited. Retrying after ${retryAfter} ms`);\n        await new Promise(resolve => setTimeout(resolve, retryAfter * 1000)); // Wait before retrying\n        return sendMessage(channel, message); //Recursive retry\n      } else {\n        console.error(`Discord API request failed with status ${response.status}: ${response.statusText}`);\n        throw new Error(`Discord API error: ${response.statusText}`);\n      }\n    }\n\n    console.log('Message sent successfully!');\n\n  } catch (error) {\n    console.error('Error sending message:', error);\n  }\n}\n\n\nclient.on('messageCreate', async (message) => {\n  if (message.author.bot) return;\n  if (message.content.startsWith('!test')) {\n    await sendMessage(message.channel, 'Hello from the rate-limit-aware bot!');\n  }\n});\n\n\nclient.login(process.env.DISCORD_BOT_TOKEN);\n```\n\n**Step 3:  Environment Variables**\n\nStore your Discord bot token in a `.env` file (not directly in your code for security):\n\n```\nDISCORD_BOT_TOKEN=YOUR_BOT_TOKEN_HERE\n```\n\n\n## Explanation\n\nThe code above uses `node-fetch` to make API requests to Discord.  Crucially, it checks the HTTP response status. If it's 429 (rate limited), it parses the response body to get the `retry_after` value.  This value indicates how long to wait before retrying the request. The `setTimeout` function pauses execution, and then the function recursively calls itself to resend the message.   This recursive call continues until successful or a non-429 error occurs.  Error handling is included to catch other potential API errors.\n\n\nRemember to replace `\"YOUR_BOT_TOKEN_HERE\"` with your actual bot token. Always keep your bot token secure and never commit it to public repositories.\n\n\n## External References\n\n* **Discord API Rate Limits:** [https://discord.com/developers/docs/topics/rate-limits](https://discord.com/developers/docs/topics/rate-limits)\n* **node-fetch documentation:** [https://www.npmjs.com/package/node-fetch](https://www.npmjs.com/package/node-fetch)\n* **Discord.js Guide:** [https://discord.js.org/#/](https://discord.js.org/#/)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":462,"title":"Discord.js: Handling Rate Limits and Avoiding \"DiscordAPIError: 429\""}]
