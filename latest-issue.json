[{"body":"\nThis document addresses a common problem encountered when developing Discord bots using the discord.js library: rate limits.  Discord employs rate limits to prevent abuse and maintain server stability.  Ignoring these limits can lead to your bot being temporarily or permanently banned.\n\n\n**Description of the Error:**\n\nThe most common manifestation of hitting Discord's rate limits is receiving a `DiscordAPIError` with the code `50013`  (or similar error codes indicating rate limit).  This error typically halts your bot's execution and prevents it from sending further messages, edits, or other API requests until the rate limit window expires.\n\n\n**Code (Step-by-Step Fix):**\n\nThis example focuses on handling rate limits when sending messages.  The key is using `setTimeout` to introduce delays between requests when necessary.\n\n**1. Basic Message Sending (Without Rate Limit Handling):**\n\n```javascript\nconst Discord = require('discord.js');\nconst client = new Discord.Client({ intents: [Discord.GatewayIntentBits.Guilds, Discord.GatewayIntentBits.GuildMessages] });\n\nclient.on('messageCreate', message => {\n  if (message.content === '!hello') {\n    message.channel.send('Hello!');\n  }\n});\n\nclient.login('YOUR_BOT_TOKEN');\n```\n\nThis code, if repeatedly triggered,  will likely hit rate limits.\n\n\n**2. Implementing Rate Limit Handling:**\n\n```javascript\nconst Discord = require('discord.js');\nconst client = new Discord.Client({ intents: [Discord.GatewayIntentBits.Guilds, Discord.GatewayIntentBits.GuildMessages] });\n\nlet canSend = true; // Flag to track rate limit status\nconst rateLimitDelay = 1000; // Delay in milliseconds (adjust as needed)\n\nclient.on('messageCreate', message => {\n  if (message.content === '!hello') {\n    if (canSend) {\n      canSend = false; // Set flag to prevent further immediate sends\n      message.channel.send('Hello!')\n        .then(() => {\n          setTimeout(() => {\n            canSend = true; // Reset flag after delay\n          }, rateLimitDelay);\n        })\n        .catch(error => {\n          console.error('Error sending message:', error);\n          if (error.code === 50013) {\n            console.error('Rate limit hit.  Waiting...');\n            // You might want more sophisticated handling here, like exponential backoff.\n            setTimeout(() => {\n              canSend = true;\n            }, rateLimitDelay * 2); // Double the delay after a rate limit hit.\n          }\n        });\n    }\n  }\n});\n\nclient.login('YOUR_BOT_TOKEN');\n\n```\n\nThis improved version uses a boolean flag (`canSend`) and `setTimeout` to introduce a delay after each message is sent.  The `catch` block specifically handles `50013` errors (rate limits), adjusting the delay to avoid further collisions.\n\n**3. More Robust Handling (Exponential Backoff):**\n\nFor a more sophisticated approach, implement exponential backoff:  after each rate limit hit, increase the delay exponentially. This prevents repeated attempts that will likely fail.\n\n```javascript\nlet delay = rateLimitDelay; // Initial delay\n... // other code from previous example ...\n        .catch(error => {\n          console.error('Error sending message:', error);\n          if (error.code === 50013) {\n            console.error('Rate limit hit.  Waiting...');\n            delay *= 2; // Double the delay\n            setTimeout(() => {\n              canSend = true;\n              delay = rateLimitDelay; // Reset delay after successful send\n            }, delay);\n          }\n        });\n```\n\n\n**Explanation:**\n\nThe solution uses a simple flag and `setTimeout` to ensure messages are sent with appropriate spacing. The improved version implements exponential backoff, a common strategy for handling rate limits.  This helps your bot recover gracefully from rate limit violations without risking a ban.\n\n\n**External References:**\n\n* **discord.js Documentation:** [https://discord.js.org/](https://discord.js.org/) (Check for API rate limit information in the documentation)\n* **Discord API Rate Limits:**  (Search for \"Discord API Rate Limits\" on the Discord Developer Portal for official information â€“ the exact documentation location can change)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":576,"title":"Discord.js: Handling Rate Limits Effectively"}]
