[{"body":"\nThis document addresses a common error encountered when using Next.js Middleware: `Error: NextResponse.redirect() is not a function`. This error typically arises from incorrectly importing or using the `NextResponse` object within your middleware.  It means you're trying to use the `redirect()` method on something that isn't a `NextResponse` object.\n\n**Description of the Error:**\n\nThe `Error: NextResponse.redirect() is not a function` error occurs when you attempt to call the `redirect()` method on a variable that hasn't been correctly assigned a `NextResponse` object. This happens frequently due to incorrect import statements or attempting to use `NextResponse` in a context where it isn't available (e.g., within a regular component or API route that doesn't support it).\n\n**Code and Step-by-Step Fix:**\n\nLet's assume you have a middleware function intended to redirect users based on a certain condition:\n\n**Incorrect Code:**\n\n```javascript\n// pages/api/middleware.js  (INCORRECT - This will throw the error)\nimport { NextResponse } from 'next/server';\n\nexport function middleware(req) {\n  const url = req.url;\n  if (url.includes('/admin')) {\n    // INCORRECT:  `redirect` is not a function on an object that's not a NextResponse object\n    return redirect('/login'); \n  }\n}\n```\n\n**Corrected Code:**\n\n```javascript\n// pages/api/middleware.js (CORRECTED)\nimport { NextResponse } from 'next/server';\n\nexport function middleware(req) {\n  const url = req.url;\n  if (url.includes('/admin')) {\n    return NextResponse.redirect(new URL('/login', req.url));\n  }\n  return NextResponse.next(); //Important: Always return a NextResponse object\n}\n\n// pages/api/middleware.js (Alternative using a different redirect method)\nimport { NextResponse } from 'next/server';\n\nexport function middleware(req, res) {\n    const url = req.nextUrl.clone();\n    if (url.pathname.includes('/admin')) {\n        url.pathname = '/login';\n        return NextResponse.rewrite(url);\n    }\n    return NextResponse.next(); //Important: Always return a NextResponse object\n}\n\n```\n\n**Explanation:**\n\nThe corrected code demonstrates two key changes:\n\n1. **Correct Import:** We correctly import `NextResponse` from `next/server`.  This is crucial.\n\n2. **Correct Usage:**  Instead of directly calling `redirect()`, we create a new `NextResponse` object using `NextResponse.redirect()`.  The `redirect()` method takes a URL as an argument.  This URL needs to be a URL object, which is created with `new URL('/login', req.url)` in the first example. The second example shows how to use `NextResponse.rewrite`, which modifies the current request's URL without a full redirect, which can be beneficial for SEO.  Crucially, we always explicitly return a `NextResponse` object, either `NextResponse.redirect()` or `NextResponse.next()` (which continues to the next middleware or the requested page).\n\n\n**External References:**\n\n* [Next.js Middleware Documentation](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n* [Next.js API Routes Documentation](https://nextjs.org/docs/api-routes/introduction)\n* [NextResponse API Reference](https://nextjs.org/docs/api-reference/next/server#nextresponse)\n\n\n**Conclusion:**\n\nThe `Error: NextResponse.redirect() is not a function` error is usually caused by an incorrect usage of the `NextResponse` object within your Next.js middleware.  By ensuring correct imports and using `NextResponse` methods appropriately, you can resolve this error and implement successful redirects within your application.\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":870,"title":"Handling `Error: NextResponse.redirect() is not a function` in Next.js Middleware"}]
