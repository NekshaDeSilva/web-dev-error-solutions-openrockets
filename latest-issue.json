[{"body":"\nThis document addresses a common issue developers encounter when using Next.js Middleware: incorrectly handling `not_found` responses and subsequent redirects.  Improperly configured middleware can lead to unexpected behavior, such as infinite redirect loops or failure to display a custom 404 page.\n\n\n**Description of the Error:**\n\nWhen a request hits your Next.js Middleware, and the middleware determines that the resource is not found (e.g., a non-existent page), it needs to return a proper `not_found` response.  Failing to do so, or attempting a redirect within the `not_found` response logic incorrectly, can result in the application getting stuck in a redirect loop or failing to display a 404 page.  The error manifests as an endless redirect loop in the browser, or a blank page with no helpful error messages.\n\n\n**Code: Step-by-Step Fix**\n\nLet's assume we have a middleware function that attempts to redirect based on a condition, and if the condition fails, it should return a 404.\n\n**Incorrect Middleware:**\n\n```javascript\n// pages/api/middleware.js\nimport { NextResponse } from 'next/server'\n\nexport function middleware(req) {\n  const path = req.nextUrl.pathname;\n\n  if (path === '/some-page') {\n    return NextResponse.redirect(new URL('/home', req.url));\n  } else {\n    // INCORRECT: This will cause an infinite redirect loop if the route is not found\n    return NextResponse.redirect(new URL('/404', req.url)); \n  }\n}\n\nexport const config = {\n  matcher: ['/some-page', '/another-page'],\n};\n```\n\n**Corrected Middleware:**\n\n```javascript\n// pages/api/middleware.js\nimport { NextResponse } from 'next/server'\n\nexport function middleware(req) {\n  const path = req.nextUrl.pathname;\n\n  if (path === '/some-page') {\n    return NextResponse.redirect(new URL('/home', req.url));\n  } else {\n    // CORRECT: Returns a proper 404 response\n    return new Response('Not Found', { status: 404 });\n  }\n}\n\nexport const config = {\n  matcher: ['/some-page', '/another-page'],\n};\n```\n\n**Explanation:**\n\nThe incorrect code uses `NextResponse.redirect` even when the page is not found.  This leads to a continuous redirect loop. The correct version uses `new Response('Not Found', { status: 404 })` which explicitly returns a 404 status code, allowing Next.js to handle the error gracefully and display a custom 404 page (if defined).  `NextResponse.redirect` should only be used when a redirect is intended, and only after successful path validation within the middleware function.\n\n\n**External References:**\n\n* [Next.js Middleware Documentation](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n* [NextResponse API Reference](https://nextjs.org/docs/api-reference/next/server#nextresponse)\n* [Handling 404 Errors in Next.js](https://nextjs.org/docs/app/building-your-application/routing/404)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":973,"title":"Next.js Middleware: Handling `not_found` Responses and Redirects"}]
