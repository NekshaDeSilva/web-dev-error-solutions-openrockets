[{"body":"\nThis document details a CSS-only technique to create an expanding card with a reveal effect.  The effect showcases a hidden content area that smoothly expands when the card is hovered over. This is achieved using CSS transitions, transforms, and the `:hover` pseudo-class, avoiding the need for JavaScript.  This example utilizes plain CSS3; no frameworks like Tailwind are necessary.\n\n\n**Description of the Styling:**\n\nThe styling creates a card with a visible front and a hidden back. On hover, the card rotates along the Y-axis, revealing the hidden back content.  The transition ensures a smooth animation. The specific dimensions and colors are easily customizable.\n\n\n**Full Code:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Expanding Card</title>\n<style>\n.card {\n  width: 200px;\n  height: 150px;\n  perspective: 1000px; /* Enables 3D transforms */\n  transform-style: preserve-3d; /* Preserves 3D space for children */\n}\n\n.card-front, .card-back {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  backface-visibility: hidden; /* Hides the back when not visible */\n  transition: transform 0.5s ease-in-out; /* Smooth transition */\n}\n\n.card-front {\n  background-color: #4CAF50;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n}\n\n.card-back {\n  background-color: #f44336;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  transform: rotateY(180deg); /* Initially rotated to the back */\n}\n\n.card:hover .card-front {\n  transform: rotateY(-180deg); /* Rotate on hover to reveal the back */\n}\n\n.card:hover .card-back {\n  transform: rotateY(0deg); /* Rotate on hover to be visible */\n}\n</style>\n</head>\n<body>\n\n<div class=\"card\">\n  <div class=\"card-front\">Front</div>\n  <div class=\"card-back\">Back</div>\n</div>\n\n</body>\n</html>\n```\n\n**Explanation:**\n\n* **`perspective` and `transform-style`:** These properties are crucial for enabling the 3D rotation. `perspective` sets the distance from the viewer to the card, creating the depth effect, while `transform-style: preserve-3d` ensures that child elements maintain their 3D positions.\n* **`backface-visibility: hidden`:** This hides the back of the card initially.  Without it, both sides would be visible.\n* **`transition`:** This property smoothly animates the `transform` property over 0.5 seconds, creating a fluid rotation.\n* **`:hover` pseudo-class:** This targets the card when the mouse hovers over it, triggering the transformation.\n* **`transform: rotateY()`:** This rotates the elements along the Y-axis.  Negative values rotate in one direction, positive in the other.\n\n\n\n**External References:**\n\n* [MDN Web Docs - CSS Transforms](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\n* [MDN Web Docs - CSS Transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/transition)\n* [CSS-Tricks - Understanding CSS Transforms](https://css-tricks.com/almanac/properties/t/transform/)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":181,"title":"Creating a CSS-only Expanding Card with a Reveal Effect"}]
