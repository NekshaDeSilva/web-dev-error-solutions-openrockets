[{"body":"\nThis document details how to create a visually appealing loading spinner using only CSS.  We'll utilize CSS animations and transformations to achieve a smooth, rotating effect without relying on JavaScript or image assets.  This technique is lightweight and performant.\n\n**Description of the Styling:**\n\nThe loading spinner will be a four-part circle, with each part rotating independently to create a dynamic loading animation.  The color will be a vibrant blue, but this can be easily customized.  The design is clean and modern, suitable for various web applications.\n\n**Full Code:**\n\n```css\n.loader {\n  width: 80px;\n  height: 80px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.loader div {\n  position: absolute;\n  width: 16px;\n  height: 16px;\n  background-color: #007bff; /* Blue color */\n  border-radius: 50%;\n  animation: rotate 1s linear infinite;\n}\n\n.loader div:nth-child(1) {\n  animation-delay: 0s;\n}\n\n.loader div:nth-child(2) {\n  animation-delay: 0.25s;\n}\n\n.loader div:nth-child(3) {\n  animation-delay: 0.5s;\n}\n\n.loader div:nth-child(4) {\n  animation-delay: 0.75s;\n}\n\n@keyframes rotate {\n  0% {\n    transform: rotate(0deg) translate(32px) rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg) translate(32px) rotate(-360deg);\n  }\n}\n\n/* Positioning the divs around a central point */\n.loader div:nth-child(1) {\n  top: 0;\n  left: 32px;\n}\n.loader div:nth-child(2) {\n  top: 32px;\n  left: 0;\n}\n.loader div:nth-child(3) {\n  top: 32px;\n  left: 64px;\n}\n.loader div:nth-child(4) {\n  top: 64px;\n  left: 32px;\n}\n```\n\n**Explanation:**\n\n* **`.loader`:** This class sets the size and uses flexbox to center the child elements.\n* **`.loader div`:** Styles each individual part of the spinner, setting its size, background color, and shape (circle).\n* **`:nth-child`:** Selects each div individually and applies a different animation delay, creating the staggered rotation effect.\n* **`@keyframes rotate`:** Defines the animation, rotating each element 360 degrees continuously.  The `translate` function positions each dot on the circle's circumference. The double `rotate` creates the correct animation effect.\n* **Positioning:** The individual positioning of the divs is essential for the circular formation.\n\n**External References:**\n\n* [MDN Web Docs on CSS Animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)\n* [CSS-Tricks on Keyframes](https://css-tricks.com/snippets/css/keyframe-animation-syntax/)\n* [Understanding `transform: translate`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate)\n\n\nTo use this code, simply include it in your CSS file and then add a `<div class=\"loader\"></div>` to your HTML where you want the spinner to appear.\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":152,"title":"Creating a Pure CSS Loading Spinner"}]
