[{"body":"\nThis document details how to create a three-dimensional cube using only CSS.  No JavaScript is required. This effect leverages CSS transforms (`rotateX`, `rotateY`) and multiple pseudo-elements to build the illusion of depth.\n\n**Description of the Styling:**\n\nThe cube is constructed using a single `div` element as the base, and six pseudo-elements (`::before` and `::after` nested to create a total of six faces). Each face is styled individually with a different background color to distinguish them.  CSS transforms are then applied to rotate these faces into a three-dimensional arrangement.  The perspective property is crucial in creating the sense of depth.\n\n\n**Full Code:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>CSS 3D Cube</title>\n<style>\n.cube {\n  width: 100px;\n  height: 100px;\n  position: relative;\n  perspective: 150px; /* Adjust for perspective strength */\n  margin: 50px auto;\n}\n\n.cube, .cube::before, .cube::after {\n  background-color: #ddd; /* Base color */\n  display: block;\n}\n\n.cube::before, .cube::after {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  transform-style: preserve-3d;\n}\n\n.cube::before {\n  transform: translateZ(-50px) rotateX(90deg);\n  background-color: lightblue; /* Top Face */\n}\n\n.cube::after {\n  transform: translateZ(50px) rotateX(180deg) rotateY(180deg);\n  background-color: lightgreen; /* Bottom Face */\n}\n\n.cube:before::before, .cube:before::after, .cube:after::before, .cube:after::after {\n    position: absolute;\n    top: 0; left: 0;\n    width: 100%; height: 100%;\n    transform-style: preserve-3d;\n    background-color: #ddd;\n}\n\n\n/*Side Faces*/\n\n.cube::before::before {\n  transform: translateZ(-50px) rotateY(90deg);\n  background-color: lightcoral; /* Right Face */\n}\n\n.cube::before::after {\n  transform: translateZ(-50px) rotateY(-90deg);\n  background-color: lightyellow; /* Left Face */\n}\n\n.cube::after::before {\n  transform: translateZ(50px) rotateY(90deg);\n  background-color: lightpink; /* Right Face Bottom */\n}\n\n.cube::after::after {\n  transform: translateZ(50px) rotateY(-90deg);\n  background-color: lightcyan; /* Left Face Bottom */\n}\n\n\n\n.cube::before::before, .cube::before::after, .cube::after::before, .cube::after::after {\n    background-size: 100% 100%;\n}\n</style>\n</head>\n<body>\n\n<div class=\"cube\"></div>\n\n</body>\n</html>\n```\n\n**Explanation:**\n\n1. **`perspective`:** This property on the main `.cube` element creates the 3D viewing space.  Adjust the value (in pixels) to change the perspective strength.\n\n2. **`transform-style: preserve-3d;`:** This crucial property ensures that the transformations on child elements are applied in 3D space.\n\n3. **`translateZ()`:** This moves the pseudo-elements along the z-axis (into and out of the screen), creating the depth.\n\n4. **`rotateX()` and `rotateY()`:** These rotate the elements around the x and y axes, creating the cube's faces.\n\n5. **Nested Pseudo-elements:** We use nested pseudo-elements to efficiently create the cube's six faces. The careful arrangement of rotations and translations is key to achieve the desired effect.\n\n\n**Links to Resources to Learn More:**\n\n* **MDN Web Docs on CSS Transforms:** [https://developer.mozilla.org/en-US/docs/Web/CSS/transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\n* **CSS Tricks on 3D Transforms:** (Search for \"CSS 3D Transforms\" on CSS Tricks website)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":527,"title":"Creating a CSS-only 3D Cube"}]
