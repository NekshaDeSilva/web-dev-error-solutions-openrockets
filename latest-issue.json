[{"body":"\nThis document addresses a common issue developers encounter when using Next.js Middleware to perform redirects based on the original request URL.  Specifically, it tackles situations where manipulating `request.nextUrl.pathname` doesn't correctly reflect in the final redirect URL.\n\n\n**Description of the Error:**\n\nWhen attempting to redirect based on logic applied to `request.nextUrl.pathname` within middleware, the resulting redirect might not always behave as expected.  The redirect might point to an incorrect path, potentially leading to a 404 error or an unexpected page being displayed. This often happens when modifications to `request.nextUrl.pathname` are not properly handled by the underlying Next.js routing system, particularly when combined with other URL parameters or query strings.\n\n\n**Code Example: Incorrect Implementation**\n\nLet's say you want to redirect all requests to `/blog/*` to `/articles/*`. An incorrect implementation might look like this:\n\n```javascript\n// pages/api/middleware.js\nexport function middleware(req, res) {\n  if (req.nextUrl.pathname.startsWith('/blog')) {\n    req.nextUrl.pathname = req.nextUrl.pathname.replace('/blog', '/articles');\n    return NextResponse.rewrite(req.nextUrl);\n  }\n}\n\nexport const config = {\n  matcher: ['/blog/:path*'],\n};\n```\n\nThis approach *might* appear to work in some cases, but it's unreliable and prone to errors, especially when dealing with complex URLs or query parameters.  The `rewrite` method might not correctly handle all aspects of the URL modification.\n\n\n**Step-by-Step Code Fix:**\n\nThe correct approach is to construct a new URL object using the `NextResponse.redirect()` method.  This ensures that the entire URL is properly updated, including query parameters:\n\n```javascript\n// pages/api/middleware.js\nimport { NextResponse } from 'next/server';\n\nexport function middleware(req) {\n  const { pathname } = req.nextUrl;\n\n  if (pathname.startsWith('/blog')) {\n    const newPathname = pathname.replace('/blog', '/articles');\n    const newUrl = new URL(req.url);  // Create a new URL object\n    newUrl.pathname = newPathname;      // Set the new pathname\n\n    return NextResponse.redirect(newUrl); // Redirect using the updated URL object\n  }\n}\n\nexport const config = {\n  matcher: ['/blog/:path*'],\n};\n```\n\nThis revised code creates a new `URL` object from the original request URL. Then, it modifies only the `pathname` property within this new object, ensuring that other parts of the URL (like query parameters) remain unchanged. Finally, it uses `NextResponse.redirect()` with the correctly constructed URL, guaranteeing a reliable redirect.\n\n\n**Explanation:**\n\nThe problem with the initial approach stems from directly manipulating `req.nextUrl`.  While it might seem convenient, the internal mechanisms of Next.js might not fully recognize these in-place changes. Creating a new `URL` object provides a cleaner and more reliable way to construct the intended redirect target, ensuring that all URL components are properly handled by the routing system.\n\n\n**External References:**\n\n* [Next.js Middleware Documentation](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n* [NextResponse API Reference](https://nextjs.org/docs/api-reference/next/server#nextresponse)\n* [URL API Reference (MDN)](https://developer.mozilla.org/en-US/docs/Web/API/URL)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":1270,"title":"Next.js Middleware: Handling `request.nextUrl.pathname`  in Redirects"}]
