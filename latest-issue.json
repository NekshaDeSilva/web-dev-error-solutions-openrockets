[{"body":"\n## Description of the Error\n\nThe error `ReferenceError: process is not defined` commonly occurs in Next.js applications when you try to access the global `process` object in the browser environment.  The `process` object is a Node.js global, available on the server-side, but not directly accessible in the client-side (browser) JavaScript code.  This often happens when using libraries or code snippets that rely on `process.env` for accessing environment variables.\n\n## Step-by-Step Code Fix\n\nLet's assume you're trying to access an environment variable like `NEXT_PUBLIC_API_KEY`  which you've defined in your `.env.local` file (or similar).  The naive approach (that will cause the error) would be:\n\n```javascript\n// pages/api/hello.js (Incorrect - will throw error on client-side)\nconst apiKey = process.env.NEXT_PUBLIC_API_KEY;\nconsole.log(apiKey); \n```\n\nHere's how to fix it:\n\n**1. Conditional Access:**\n\nThe best solution is to check if the `process` object exists before attempting to access it.  This allows the code to run both server-side and client-side without errors.\n\n```javascript\n// pages/api/hello.js (Correct)\nlet apiKey;\nif (typeof window === 'undefined') {\n  apiKey = process.env.NEXT_PUBLIC_API_KEY;\n} else {\n  apiKey = process.env.NEXT_PUBLIC_API_KEY; //This may still be undefined, see below\n}\n\nif (apiKey) {\n  console.log(apiKey);\n} else {\n  console.error(\"API key not found. Check your .env file\");\n}\n```\n\n**2. Using `next/config`:**\n\nFor client-side access to environment variables, use the `next/config` module:\n\n```javascript\n// pages/index.js (Client-side access)\nimport { useRouter } from 'next/router'\n\nconst MyComponent = () => {\n  const router = useRouter()\n  const apiKey = process.env.NEXT_PUBLIC_API_KEY;  // Still undefined\n\n  //Solution using next/config\n  const { publicRuntimeConfig } = require('next/config').default();\n  const apiKeyFromConfig = publicRuntimeConfig.apiKey;\n\n\n  return (\n      <div>\n          <h1>API Key (Insecure - do not use this way for sensitive data): {apiKey}</h1>\n          <h1>API Key from next/config: {apiKeyFromConfig}</h1>\n      </div>\n  );\n};\n\nexport default MyComponent;\n```\n\nRemember to add the apiKey to `next.config.js`\n\n```javascript\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  publicRuntimeConfig: {\n    apiKey: process.env.NEXT_PUBLIC_API_KEY,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n**3. Handling undefined values:**\n\nAlways check if `apiKey` or  `apiKeyFromConfig` is defined to prevent further errors.  Using optional chaining (`?.`) or the nullish coalescing operator (`??`) can make this cleaner:\n\n```javascript\nconsole.log(apiKeyFromConfig ?? \"API key not set\"); \n```\n\n## Explanation\n\nThe `process` object is part of Node.js's runtime environment.  Browsers don't have a direct equivalent.  By checking for `typeof window === 'undefined'`, we detect if the code is running on the server (Node.js) or the client (browser).  The `next/config` provides a safe and consistent mechanism to expose environment variables to the client side. Never expose sensitive data in this way, instead use server-side calls to APIs, using fetched data on the client-side.\n\n## External References\n\n* [Next.js Environment Variables](https://nextjs.org/docs/basic-features/environment-variables)\n* [Next.js API Routes](https://nextjs.org/docs/api-routes/introduction)\n* [Node.js `process` object](https://nodejs.org/api/process.html)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":135,"title":"Troubleshooting `ReferenceError: process is not defined` in Next.js"}]
