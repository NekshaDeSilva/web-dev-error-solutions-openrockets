[{"body":"\nThis document addresses a common error encountered when working with Next.js Middleware:  importing modules from `next/server` within client-side components or API routes that shouldn't access server-side-only modules.\n\n**Description of the Error:**\n\nThe error typically manifests as a runtime error or build error, indicating that a module from `next/server` (like `NextResponse`) is being used in a context where it's not available. This usually happens when code intended for middleware or API routes is accidentally included in a page component or another client-side module.  The error message might vary, but it often includes phrases like \"Cannot find module 'next/server'\" or a similar indication that the module is unavailable in the client-side environment.\n\n**Code Example (Problematic):**\n\nLet's say you have a component `pages/my-page.js` that tries to use `NextResponse`:\n\n```javascript\n// pages/my-page.js (INCORRECT)\nimport { NextResponse } from 'next/server';\n\nfunction MyPage() {\n  const response = NextResponse.redirect('/'); // This will cause an error!\n  return <div>My Page</div>;\n}\n\nexport default MyPage;\n```\n\n**Step-by-Step Fix:**\n\n1. **Identify the offending code:** Carefully review your component and its imports.  Locate any instances where modules from `next/server` are used.  In this example, it's the import of `NextResponse`.\n\n2. **Move server-side logic to the appropriate location:** If the logic involving `NextResponse` belongs to middleware or an API route, move it there.  Client-side components should *not* interact directly with `NextResponse`.\n\n3. **Refactor client-side logic (if necessary):**  If the component needs to conditionally render based on some server-side data, fetch that data using `getServerSideProps` or `getStaticProps` and pass it to the component as a prop.\n\n**Corrected Code (Middleware):**\n\n```javascript\n// middleware.js\nimport { NextResponse } from 'next/server';\n\nexport function middleware(req) {\n  const url = req.nextUrl.clone();\n  if (req.nextUrl.pathname === '/') {\n    url.pathname = '/my-other-page';\n    return NextResponse.rewrite(url);\n  }\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: '/', // Match all requests\n};\n```\n\n**Corrected Code (Component):**\n\n\n```javascript\n// pages/my-page.js (CORRECT)\nfunction MyPage({ isRedirected }) {\n  return (\n    <div>\n      {isRedirected ? (\n          <p>Redirected!</p>\n        ) : (\n          <p>My Page</p>\n      )}\n    </div>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  // Simulate a server-side condition that might trigger a redirect in middleware\n  const shouldRedirect = false; // Replace with your actual logic\n\n  return {\n    props: { isRedirected: shouldRedirect },\n  };\n}\n\nexport default MyPage;\n\n```\n\n\n**Explanation:**\n\n`next/server` modules are designed for the server-side environment within Next.js. They provide functionality like `NextResponse` which is for manipulating HTTP responses.  These modules are not available in the browser (client-side). By moving the server-side logic (using `NextResponse`) to a middleware file or an API route, you ensure that the code runs only on the server, avoiding the import error. The corrected component retrieves the server-side information through `getServerSideProps` and renders accordingly.\n\n**External References:**\n\n* [Next.js Middleware Documentation](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n* [Next.js API Routes Documentation](https://nextjs.org/docs/api-routes/introduction)\n* [Next.js Data Fetching](https://nextjs.org/docs/basic-features/data-fetching)\n\n\n**Copyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.**\n","number":990,"title":"Next.js Middleware: Handling `next/server` Import Errors"}]
