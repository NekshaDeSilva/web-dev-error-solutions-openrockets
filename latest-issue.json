[{"body":"\nThis document addresses a common issue developers encounter when trying to redirect users from within `getServerSideProps` using `NextResponse`.  `NextResponse` is designed for use within middleware and API routes, not within the `getServerSideProps` function of a page component.  Attempting to use it will result in an error.\n\n**Description of the Error:**\n\nWhen you use `NextResponse.redirect` inside `getServerSideProps`, you'll typically encounter an error similar to this:\n\n```\nError: Cannot find module 'next/server'\n```\n\nor a less specific error indicating an unexpected response from `getServerSideProps`. This happens because `getServerSideProps` expects to return an object containing props, not a `Response` object created by `NextResponse`.\n\n**Fixing the Issue Step-by-Step:**\n\nInstead of using `NextResponse.redirect` directly, you should leverage the standard `redirect` function provided by Next.js within `getServerSideProps`.\n\n**Code Example (Problematic):**\n\n```javascript\n// pages/my-page.js\nimport {getServerSideProps} from 'next/server';\nimport {NextResponse} from 'next/server';\n\nexport async function getServerSideProps(context) {\n  // ... some logic ...\n  if (someCondition) {\n    return NextResponse.redirect(new URL('/another-page', context.req.url));\n  }\n  // ... more logic ...\n  return { props: { data: someData } };\n}\n\nexport default function MyPage({ data }) {\n  // ... render component ...\n}\n```\n\n**Code Example (Corrected):**\n\n```javascript\n// pages/my-page.js\nimport {getServerSideProps} from 'next/server';\n\nexport async function getServerSideProps(context) {\n  // ... some logic ...\n  if (someCondition) {\n    return {\n      redirect: {\n        destination: '/another-page',\n        permanent: false // or true depending on your needs\n      }\n    }\n  }\n  // ... more logic ...\n  const someData = await fetchSomeData();\n  return { props: { data: someData } };\n}\n\nexport default function MyPage({ data }) {\n  // ... render component ...\n}\n```\n\n\n**Explanation:**\n\nThe corrected code utilizes the standard `redirect` object within the return value of `getServerSideProps`. This object takes two properties:\n\n* `destination`: The URL to redirect to.\n* `permanent`: A boolean indicating whether the redirect should be permanent (301) or temporary (307).\n\n\n**External References:**\n\n* [Next.js API Routes Documentation](https://nextjs.org/docs/api-routes/introduction)\n* [Next.js getServerSideProps Documentation](https://nextjs.org/docs/basic-features/data-fetching/getserversideprops)\n* [Next.js Middleware Documentation](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n\n\n**Conclusion:**\n\nRemember that `NextResponse` is for use in the context of Middleware and API routes.  For redirects within `getServerSideProps`, always utilize the structured `redirect` object as shown above. This ensures compatibility and avoids runtime errors.\n\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":1116,"title":"Next.js Middleware: Handling `NextResponse.redirect` in `getServerSideProps`"}]
