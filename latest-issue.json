[{"body":"\nThis document addresses a common error encountered when developing Next.js applications:  \"Module not found: Error: Can't resolve 'fs' in ...\".  This usually happens when attempting to use Node.js modules that directly interact with the file system (like `fs`, `path`, etc.) within the client-side (browser) portion of your application.  Next.js uses server-side rendering (SSR) and the browser environment doesn't have access to the same Node.js modules available on the server.\n\n\n## Description of the Error\n\nThe error \"Module not found: Error: Can't resolve 'fs' in ...\" arises when your Next.js application tries to import and use the `fs` module (or similar file system modules like `path`) in a component that's rendered in the browser.  The `fs` module is part of Node.js and is not available in the browser's JavaScript environment.\n\n## Fixing the Error: Step-by-Step Code\n\nThe solution involves separating file system operations to the server-side. Here's how you can refactor your code:\n\n**1.  Problem Code (Illustrative Example):**\n\n```javascript\n// pages/mypage.js\nimport fs from 'fs';\n\nconst MyPage = () => {\n  const data = fs.readFileSync('./data.json'); // This will cause the error\n  return (\n    <div>\n      {/* ... render data ... */}\n    </div>\n  );\n};\n\nexport default MyPage;\n```\n\n**2.  Refactored Code using API Routes:**\n\nNext.js provides API routes, which are serverless functions executed on the server. We'll move the file system operation to an API route.\n\n```javascript\n// pages/api/data.js (API Route)\nimport fs from 'fs';\nimport path from 'path';\n\nexport default async function handler(req, res) {\n  const filePath = path.join(process.cwd(), 'data.json'); //Correct path\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    res.status(200).json(JSON.parse(data));\n  } catch (error) {\n    console.error('Error reading file:', error);\n    res.status(500).json({ error: 'Failed to read data' });\n  }\n}\n```\n\n**3.  Fetching Data in the Component:**\n\nNow, the client-side component fetches the data from the API route.\n\n```javascript\n// pages/mypage.js\nimport useSWR from 'swr'; // You'll need to install 'swr' : npm install swr\n\nconst fetcher = (...args) => fetch(...args).then((res) => res.json());\n\nconst MyPage = () => {\n  const { data, error } = useSWR('/api/data', fetcher);\n\n  if (error) return <div>failed to load</div>;\n  if (!data) return <div>loading...</div>;\n\n  return (\n    <div>\n      {/* ... render data ... */}\n      {JSON.stringify(data)}\n    </div>\n  );\n};\n\nexport default MyPage;\n```\n\n## Explanation\n\nThe original code tried to use `fs.readFileSync` directly in a client-side component. This is invalid because the browser environment doesn't have access to the Node.js `fs` module. By creating an API route (`pages/api/data.js`), the file system operation is performed on the server, where `fs` is available.  The client-side component then fetches the processed data from this API route using `useSWR` or `fetch`, ensuring the correct execution environment for file system access.  `useSWR` simplifies data fetching and caching.\n\n## External References\n\n* **Next.js API Routes:** [https://nextjs.org/docs/api-routes/introduction](https://nextjs.org/docs/api-routes/introduction)\n* **`fs` module documentation:** [https://nodejs.org/api/fs.html](https://nodejs.org/api/fs.html)\n* **`swr` library:** [https://swr.vercel.app/](https://swr.vercel.app/)\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":121,"title":"Troubleshooting \"Module not found: Error: Can't resolve 'fs' in ...\" in Next.js"}]
