[{"body":"\nThis document addresses a common error encountered when developing Next.js applications that utilize server-side functionality requiring Node.js's built-in `fs` module (file system).  The error typically manifests as:  `\"Module not found: Error: Can't resolve 'fs' in ...\"`.  This is because Next.js's client-side bundles are designed for the browser environment, which lacks direct access to the file system for security reasons.\n\n\n**Description of the Error:**\n\nThe `fs` module is a core Node.js module that provides file system functionalities like reading, writing, and deleting files. Attempting to directly `import fs` or `require('fs')` within a client-side component (e.g., a `.js`, `.jsx`, `.tsx` file in the `pages` or `components` directory) in a Next.js application will result in this error.\n\n\n**Step-by-Step Code Fix:**\n\nThe solution lies in moving the code that utilizes the `fs` module to a server-side function. This can be achieved using several approaches:\n\n**1. Using `getStaticProps` or `getServerSideProps` (for data fetching at build or request time):**\n\nThis method is best for fetching data that doesn't change frequently.\n\n```javascript\n// pages/my-page.js\n\nimport { getStaticProps } from 'next';\n\nexport async function getStaticProps() {\n  const fs = require('fs'); // fs is available on the server-side\n\n  const data = fs.readFileSync('./data.json', 'utf-8');\n  const parsedData = JSON.parse(data);\n\n  return {\n    props: {\n      data: parsedData,\n    },\n  };\n}\n\nexport default function MyPage({ data }) {\n  return (\n    <div>\n      <h1>My Page</h1>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n```\n\n**2. Creating an API route:**\n\nThis is suitable for more dynamic operations or when you need to handle requests.\n\n```javascript\n// pages/api/data.js\n\nimport { NextApiRequest, NextApiResponse } from 'next';\nconst fs = require('fs');\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'GET') {\n    try {\n      const data = fs.readFileSync('./data.json', 'utf-8');\n      res.status(200).json(JSON.parse(data));\n    } catch (error) {\n      console.error('Error reading file:', error);\n      res.status(500).json({ error: 'Failed to read data' });\n    }\n  } else {\n    res.status(405).end(); // Method Not Allowed\n  }\n}\n```\n\nThen fetch the data from the client side:\n\n```javascript\n// pages/my-page.js\n\nimport { useEffect, useState } from 'react';\n\nexport default function MyPage() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('/api/data');\n      const jsonData = await response.json();\n      setData(jsonData);\n    };\n    fetchData();\n  }, []);\n\n\n  return (\n    <div>\n      <h1>My Page</h1>\n      {data ? <pre>{JSON.stringify(data, null, 2)}</pre> : <p>Loading...</p>}\n    </div>\n  );\n}\n```\n\n\n**Explanation:**\n\nThe core issue is the difference between the client-side (browser) and server-side (Node.js) environments in Next.js.  The `fs` module is part of the Node.js runtime, unavailable in the browser. By using `getStaticProps`, `getServerSideProps`, or API routes, the code using `fs` executes on the server before the page is rendered or data is sent to the client, preventing the module not found error.\n\n\n**External References:**\n\n* [Next.js API Routes Documentation](https://nextjs.org/docs/api-routes/introduction)\n* [Next.js `getStaticProps` Documentation](https://nextjs.org/docs/basic-features/data-fetching/get-static-props)\n* [Next.js `getServerSideProps` Documentation](https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props)\n* [Node.js `fs` module Documentation](https://nodejs.org/api/fs.html)\n\n\n\nCopyrights (c) OpenRockets Open-source Network. Free to use, copy, share, edit or publish.\n","number":166,"title":"Troubleshooting \"Module not found: Error: Can't resolve 'fs' in...\" in Next.js"}]
